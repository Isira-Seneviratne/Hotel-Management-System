/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FMS_Interface;

import Customer_intaface.frmHome;
import static FMS_Interface.FMS_Home1.DB_URL;
import HMS_Home.DesktopPane;
import HMS_Home.MHome;
import HRMS_Interface.MainLogin;
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import javax.swing.GroupLayout;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Prabas Gayadeeptha
 */
public class FMS_Home1 extends javax.swing.JInternalFrame {
//public class FMS_Home extends javax.swing.JFrame {

    /**
     * Creates new form FMS_Home
     */
    // JDBC driver name and database URL
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost:3306/hotel_management_system";

    //  Database credentials
    static final String USER = "root";
    static final String PASS = "";

    public FMS_Home1() {
        initComponents();
        
        this.PnlHome.setVisible(true);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        PnlHome = new javax.swing.JPanel();
        btnHMPAccounts = new javax.swing.JButton();
        btnHMPayments = new javax.swing.JButton();
        btnHMProfit = new javax.swing.JButton();
        btnHMIncome = new javax.swing.JButton();
        btnHMCashFlow = new javax.swing.JButton();
        btnHMBalance = new javax.swing.JButton();
        btnHMSignOut = new javax.swing.JButton();
        btnHMExit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PnlAccounts = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        DatepickReceipts = new org.jdesktop.swingx.JXDatePicker();
        btnAccountPreviousDay = new javax.swing.JButton();
        btnAccountNexyDay = new javax.swing.JButton();
        btnRepReport = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableReceipts = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        btnAddIncome = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnAddAllIncome = new javax.swing.JButton();
        txtIncomeRepNo = new javax.swing.JTextField();
        btnRemoveAllIncome = new javax.swing.JButton();
        btnRemoveIncome = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnAddExpense = new javax.swing.JButton();
        btnAddAllExpense = new javax.swing.JButton();
        txtExpenseRepNo = new javax.swing.JTextField();
        btnRemoveAllExpense = new javax.swing.JButton();
        btnRemoveExpense = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableIncome = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableExpense = new javax.swing.JTable();
        PnlPayments = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablePayments = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        DatePickPayTable = new org.jdesktop.swingx.JXDatePicker();
        btnDatePrevious = new javax.swing.JButton();
        btnDateNext = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        btnPayUpdate = new javax.swing.JButton();
        btnPayRmvPayment = new javax.swing.JButton();
        btnPayClear = new javax.swing.JButton();
        btnPayAdd = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        DatePickPayDate = new org.jdesktop.swingx.JXDatePicker();
        txtPayRepNo = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtAreaPayTo = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtAreaPayFor = new javax.swing.JTextArea();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        txtPaySub = new javax.swing.JTextField();
        cmbPayBy = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        txtPayTax = new javax.swing.JTextField();
        txtPayDiscount = new javax.swing.JTextField();
        txtPayTotal = new javax.swing.JTextField();
        txtPayRs = new javax.swing.JTextField();
        txtPayFrom = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txtPayTaxPercent = new javax.swing.JTextField();
        emp_background = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        PnlProfit = new javax.swing.JPanel();
        jcmbProfitPeriod = new javax.swing.JComboBox<>();
        DatePickProfitFrom = new org.jdesktop.swingx.JXDatePicker();
        lblProfitFrom = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTableProfIncomes = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTableProfExpenses = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        btnProfCalculate = new javax.swing.JButton();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtProfTotIncome = new javax.swing.JTextField();
        txtProfTotExpense = new javax.swing.JTextField();
        txtProfTotProfit = new javax.swing.JTextField();
        PnlIncomeStmt = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cmbISPeriod = new javax.swing.JComboBox<>();
        DatePickISEndDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel37 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        cmbISAddTo = new javax.swing.JComboBox<>();
        txtISValue = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtISRecord = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        btnISCalculate = new javax.swing.JButton();
        btnISAdd = new javax.swing.JButton();
        btnISupdate = new javax.swing.JButton();
        btnISRemove = new javax.swing.JButton();
        btnISClear = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableISRevenue = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableISSold = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableISExpenses = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableISIncome = new javax.swing.JTable();
        PnlCashFlow = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        cmbCFSperiod = new javax.swing.JComboBox<>();
        DatePickCFS = new org.jdesktop.swingx.JXDatePicker();
        jLabel83 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel84 = new javax.swing.JLabel();
        txtCFSRecord = new javax.swing.JTextField();
        jLabel85 = new javax.swing.JLabel();
        txtCFSValue = new javax.swing.JTextField();
        jLabel86 = new javax.swing.JLabel();
        cmbCFSAddTo = new javax.swing.JComboBox<>();
        btnCFScalculate = new javax.swing.JButton();
        btnCFSadd = new javax.swing.JButton();
        btnCFSupdate = new javax.swing.JButton();
        btnCFSremove = new javax.swing.JButton();
        btnCFSclear = new javax.swing.JButton();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTableCFSOperating = new javax.swing.JTable();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTableCFSInvesting = new javax.swing.JTable();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTableCFSFinancing = new javax.swing.JTable();
        PnlBalanceSheet = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        DatePickBS = new org.jdesktop.swingx.JXDatePicker();
        jLabel5 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabel87 = new javax.swing.JLabel();
        txtBSrecord = new javax.swing.JTextField();
        jLabel88 = new javax.swing.JLabel();
        txtBSvalue = new javax.swing.JTextField();
        jLabel89 = new javax.swing.JLabel();
        cmbBSaddto = new javax.swing.JComboBox<>();
        btnBScalculate = new javax.swing.JButton();
        btnBSadd = new javax.swing.JButton();
        btnBSupdate = new javax.swing.JButton();
        btnBSremove = new javax.swing.JButton();
        btnBSclear = new javax.swing.JButton();
        jScrollPane24 = new javax.swing.JScrollPane();
        jTableBSCurrentAss = new javax.swing.JTable();
        jScrollPane25 = new javax.swing.JScrollPane();
        jTableBSLongAss = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        txtBSTotalAss = new javax.swing.JTextField();
        jLabel93 = new javax.swing.JLabel();
        jScrollPane26 = new javax.swing.JScrollPane();
        jTableBSCurrentLib = new javax.swing.JTable();
        jScrollPane27 = new javax.swing.JScrollPane();
        jTableBSLongLib = new javax.swing.JTable();
        jScrollPane28 = new javax.swing.JScrollPane();
        jTableBSEquity = new javax.swing.JTable();
        jPanel22 = new javax.swing.JPanel();
        txtBSTotalLibAndEquity1 = new javax.swing.JTextField();
        jLabel92 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        emp_background1 = new javax.swing.JLabel();
        PnlMenu = new javax.swing.JPanel();
        btnMenuHome = new javax.swing.JButton();
        btnMenuAccounts = new javax.swing.JButton();
        btnMenuPayments = new javax.swing.JButton();
        btnMenuProfit = new javax.swing.JButton();
        btnMenuIncome = new javax.swing.JButton();
        btnMenuCash = new javax.swing.JButton();
        btnMenuBalance = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLayeredPane1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PnlHome.setMinimumSize(new java.awt.Dimension(1190, 580));
        PnlHome.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlHome.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnHMPAccounts.setBackground(new java.awt.Color(255, 255, 255));
        btnHMPAccounts.setText("Accounts");
        btnHMPAccounts.setContentAreaFilled(false);
        btnHMPAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMPAccountsActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMPAccounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, 100, 50));

        btnHMPayments.setBackground(new java.awt.Color(255, 255, 255));
        btnHMPayments.setForeground(new java.awt.Color(255, 255, 255));
        btnHMPayments.setText("Payments");
        btnHMPayments.setContentAreaFilled(false);
        btnHMPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMPaymentsActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMPayments, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 140, 100, 50));

        btnHMProfit.setBackground(new java.awt.Color(255, 255, 255));
        btnHMProfit.setText("Profit Calculation");
        btnHMProfit.setContentAreaFilled(false);
        btnHMProfit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMProfitActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMProfit, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 280, 130, 50));

        btnHMIncome.setBackground(new java.awt.Color(255, 255, 255));
        btnHMIncome.setForeground(new java.awt.Color(255, 255, 255));
        btnHMIncome.setText("Income Statement");
        btnHMIncome.setContentAreaFilled(false);
        btnHMIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMIncomeActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMIncome, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 420, 130, 50));

        btnHMCashFlow.setBackground(new java.awt.Color(255, 255, 255));
        btnHMCashFlow.setText("Cash Flow Statement");
        btnHMCashFlow.setContentAreaFilled(false);
        btnHMCashFlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMCashFlowActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMCashFlow, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 470, 160, 50));

        btnHMBalance.setBackground(new java.awt.Color(255, 255, 255));
        btnHMBalance.setForeground(new java.awt.Color(255, 255, 255));
        btnHMBalance.setText("Balance Sheet");
        btnHMBalance.setContentAreaFilled(false);
        btnHMBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMBalanceActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 420, 120, 50));

        btnHMSignOut.setBackground(new java.awt.Color(255, 255, 255));
        btnHMSignOut.setText("Sign Out");
        btnHMSignOut.setContentAreaFilled(false);
        btnHMSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMSignOutActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMSignOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 280, 100, 50));

        btnHMExit.setBackground(new java.awt.Color(255, 255, 255));
        btnHMExit.setForeground(new java.awt.Color(255, 255, 255));
        btnHMExit.setText("Exit");
        btnHMExit.setContentAreaFilled(false);
        btnHMExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHMExitActionPerformed(evt);
            }
        });
        PnlHome.add(btnHMExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, 100, 50));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Finance");
        jLabel4.setToolTipText("");
        PnlHome.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 280, 60, 50));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_Home_Infograph.png"))); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(1190, 580));
        jLabel2.setMinimumSize(new java.awt.Dimension(1190, 580));
        jLabel2.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlHome.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLayeredPane1.add(PnlHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 610));

        PnlAccounts.setMinimumSize(new java.awt.Dimension(1190, 580));
        PnlAccounts.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlAccounts.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_Receipts.png"))); // NOI18N
        jPanel1.add(jLabel7);
        jLabel7.setBounds(0, 0, 110, 40);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Receipts Date :");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(390, 10, 120, 30);

        DatepickReceipts.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DatepickReceipts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatepickReceiptsActionPerformed(evt);
            }
        });
        jPanel1.add(DatepickReceipts);
        DatepickReceipts.setBounds(540, 10, 130, 30);

        btnAccountPreviousDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Previous.png"))); // NOI18N
        btnAccountPreviousDay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAccountPreviousDayMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAccountPreviousDayMouseExited(evt);
            }
        });
        btnAccountPreviousDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccountPreviousDayActionPerformed(evt);
            }
        });
        jPanel1.add(btnAccountPreviousDay);
        btnAccountPreviousDay.setBounds(510, 10, 30, 30);

        btnAccountNexyDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Next.png"))); // NOI18N
        btnAccountNexyDay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAccountNexyDayMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAccountNexyDayMouseExited(evt);
            }
        });
        btnAccountNexyDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccountNexyDayActionPerformed(evt);
            }
        });
        jPanel1.add(btnAccountNexyDay);
        btnAccountNexyDay.setBounds(670, 10, 30, 30);

        btnRepReport.setText("Receipts Report");
        btnRepReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepReportActionPerformed(evt);
            }
        });
        jPanel1.add(btnRepReport);
        btnRepReport.setBounds(1040, 10, 130, 30);

        PnlAccounts.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 50));

        jScrollPane2.setAutoscrolls(true);

        jTableReceipts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "RepNo", "RepType", "Department", "Sale", "Payment", "PayMethod", "SubTotal", "Sales/Pay Tax", "Discount", "Total"
            }
        ));
        jTableReceipts.setFillsViewportHeight(true);
        jTableReceipts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableReceiptsMouseClicked(evt);
            }
        });
        jTableReceipts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableReceiptsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableReceiptsKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableReceipts);

        PnlAccounts.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1190, 240));

        jPanel2.setBackground(new java.awt.Color(51, 255, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setForeground(new java.awt.Color(51, 51, 255));
        jPanel2.setLayout(null);

        jLabel10.setBackground(new java.awt.Color(204, 204, 204));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_Income_Account.png"))); // NOI18N
        jPanel2.add(jLabel10);
        jLabel10.setBounds(0, 0, 110, 40);

        btnAddIncome.setText("Add");
        btnAddIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddIncomeActionPerformed(evt);
            }
        });
        jPanel2.add(btnAddIncome);
        btnAddIncome.setBounds(430, 0, 80, 40);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("ReceiptNo:");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(290, 0, 70, 40);

        btnAddAllIncome.setText("Add All");
        btnAddAllIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllIncomeActionPerformed(evt);
            }
        });
        jPanel2.add(btnAddAllIncome);
        btnAddAllIncome.setBounds(110, 0, 90, 40);

        txtIncomeRepNo.setEditable(false);
        txtIncomeRepNo.setForeground(new java.awt.Color(102, 102, 102));
        txtIncomeRepNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIncomeRepNoMouseClicked(evt);
            }
        });
        jPanel2.add(txtIncomeRepNo);
        txtIncomeRepNo.setBounds(360, 0, 70, 40);

        btnRemoveAllIncome.setText("Remove All");
        btnRemoveAllIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllIncomeActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemoveAllIncome);
        btnRemoveAllIncome.setBounds(200, 0, 90, 40);

        btnRemoveIncome.setText("Remove");
        btnRemoveIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveIncomeActionPerformed(evt);
            }
        });
        jPanel2.add(btnRemoveIncome);
        btnRemoveIncome.setBounds(510, 0, 80, 40);

        PnlAccounts.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 600, 40));

        jPanel3.setBackground(new java.awt.Color(255, 51, 51));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("ReceiptNo:");
        jPanel3.add(jLabel11);
        jLabel11.setBounds(290, 0, 70, 40);

        jLabel12.setBackground(new java.awt.Color(204, 204, 204));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_Expense_Account.png"))); // NOI18N
        jPanel3.add(jLabel12);
        jLabel12.setBounds(0, 0, 110, 40);

        btnAddExpense.setText("Add");
        btnAddExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddExpenseActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddExpense);
        btnAddExpense.setBounds(430, 0, 80, 40);

        btnAddAllExpense.setText("Add All");
        btnAddAllExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllExpenseActionPerformed(evt);
            }
        });
        jPanel3.add(btnAddAllExpense);
        btnAddAllExpense.setBounds(110, 0, 90, 40);

        txtExpenseRepNo.setEditable(false);
        txtExpenseRepNo.setForeground(new java.awt.Color(102, 102, 102));
        txtExpenseRepNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtExpenseRepNoMouseClicked(evt);
            }
        });
        jPanel3.add(txtExpenseRepNo);
        txtExpenseRepNo.setBounds(360, 0, 70, 40);

        btnRemoveAllExpense.setText("Remove All");
        btnRemoveAllExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveAllExpenseActionPerformed(evt);
            }
        });
        jPanel3.add(btnRemoveAllExpense);
        btnRemoveAllExpense.setBounds(200, 0, 90, 40);

        btnRemoveExpense.setText("Remove");
        btnRemoveExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveExpenseActionPerformed(evt);
            }
        });
        jPanel3.add(btnRemoveExpense);
        btnRemoveExpense.setBounds(510, 0, 80, 40);

        PnlAccounts.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 290, 600, 40));

        jTableIncome.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "RepNo", "Payment", "Subtotal", "Pay Tax", "Discount", "Total"
            }
        ));
        jTableIncome.setFillsViewportHeight(true);
        jTableIncome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableIncomeMouseClicked(evt);
            }
        });
        jTableIncome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableIncomeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableIncomeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableIncome);

        PnlAccounts.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 600, 250));

        jScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseClicked(evt);
            }
        });

        jTableExpense.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "RepNo", "Sale", "Subtotal", "Sales Tax", "Discount", "Total"
            }
        ));
        jTableExpense.setFillsViewportHeight(true);
        jTableExpense.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableExpenseMouseClicked(evt);
            }
        });
        jTableExpense.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableExpenseKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTableExpense);

        PnlAccounts.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 330, 590, 250));

        jLayeredPane1.add(PnlAccounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        PnlPayments.setMinimumSize(new java.awt.Dimension(1190, 580));
        PnlPayments.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlPayments.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTablePayments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "RepNo", "Pay To", "For", "From", "Rs.", "Pay By", "Subtotal", "Pay Tax", "Discount", "Total"
            }
        ));
        jTablePayments.setFillsViewportHeight(true);
        jTablePayments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePaymentsMouseClicked(evt);
            }
        });
        jTablePayments.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTablePaymentsKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jTablePayments);

        PnlPayments.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 1190, 280));

        jPanel4.setBackground(new java.awt.Color(0, 153, 255));
        jPanel4.setLayout(null);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_FMD_Receipts.png"))); // NOI18N
        jLabel15.setToolTipText("");
        jPanel4.add(jLabel15);
        jLabel15.setBounds(0, 10, 210, 40);

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("Receipts Date:");
        jPanel4.add(jLabel36);
        jLabel36.setBounds(390, 10, 110, 30);

        DatePickPayTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DatePickPayTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatePickPayTableActionPerformed(evt);
            }
        });
        jPanel4.add(DatePickPayTable);
        DatePickPayTable.setBounds(530, 10, 130, 30);

        btnDatePrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Previous.png"))); // NOI18N
        btnDatePrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDatePreviousMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDatePreviousMouseExited(evt);
            }
        });
        btnDatePrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatePreviousActionPerformed(evt);
            }
        });
        jPanel4.add(btnDatePrevious);
        btnDatePrevious.setBounds(500, 10, 30, 30);

        btnDateNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Next.png"))); // NOI18N
        btnDateNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDateNextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDateNextMouseExited(evt);
            }
        });
        btnDateNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDateNextActionPerformed(evt);
            }
        });
        jPanel4.add(btnDateNext);
        btnDateNext.setBounds(660, 10, 30, 30);

        PnlPayments.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 1200, 50));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(null);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Date");
        jPanel5.add(jLabel13);
        jLabel13.setBounds(50, 10, 80, 30);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Receipt No");
        jPanel5.add(jLabel14);
        jLabel14.setBounds(50, 50, 80, 30);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setText("Pay To");
        jPanel5.add(jLabel16);
        jLabel16.setBounds(50, 90, 80, 30);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("For");
        jPanel5.add(jLabel17);
        jLabel17.setBounds(50, 130, 80, 30);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText("From");
        jPanel5.add(jLabel18);
        jLabel18.setBounds(50, 180, 80, 30);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setText("Rupees");
        jPanel5.add(jLabel19);
        jLabel19.setBounds(590, 10, 70, 30);

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("Pay By");
        jPanel5.add(jLabel20);
        jLabel20.setBounds(590, 40, 70, 30);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setText("Subtotal");
        jPanel5.add(jLabel21);
        jLabel21.setBounds(590, 90, 70, 30);

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setText("Pay Tax");
        jPanel5.add(jLabel22);
        jLabel22.setBounds(590, 120, 70, 30);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setText("Discount");
        jPanel5.add(jLabel23);
        jLabel23.setBounds(590, 150, 70, 30);

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setText("Total");
        jPanel5.add(jLabel24);
        jLabel24.setBounds(590, 180, 70, 30);

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel25.setText(":");
        jPanel5.add(jLabel25);
        jLabel25.setBounds(130, 10, 10, 30);

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setText(":");
        jPanel5.add(jLabel26);
        jLabel26.setBounds(130, 50, 10, 30);

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setText(":");
        jPanel5.add(jLabel27);
        jLabel27.setBounds(130, 90, 10, 30);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setText(":");
        jPanel5.add(jLabel28);
        jLabel28.setBounds(130, 130, 10, 30);

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel29.setText(":");
        jPanel5.add(jLabel29);
        jLabel29.setBounds(130, 180, 10, 30);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(null);

        btnPayUpdate.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnPayUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_UpdtPayment_Border.png"))); // NOI18N
        btnPayUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPayUpdateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPayUpdateMouseExited(evt);
            }
        });
        btnPayUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayUpdateActionPerformed(evt);
            }
        });
        jPanel7.add(btnPayUpdate);
        btnPayUpdate.setBounds(10, 70, 140, 40);

        btnPayRmvPayment.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnPayRmvPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_RmvPayment_Border.png"))); // NOI18N
        btnPayRmvPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPayRmvPaymentMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPayRmvPaymentMouseExited(evt);
            }
        });
        btnPayRmvPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayRmvPaymentActionPerformed(evt);
            }
        });
        jPanel7.add(btnPayRmvPayment);
        btnPayRmvPayment.setBounds(10, 120, 140, 40);

        btnPayClear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnPayClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_ClrPayment_Border.png"))); // NOI18N
        btnPayClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPayClearMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPayClearMouseExited(evt);
            }
        });
        btnPayClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayClearActionPerformed(evt);
            }
        });
        jPanel7.add(btnPayClear);
        btnPayClear.setBounds(10, 170, 140, 40);

        btnPayAdd.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnPayAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_AddPayment_Border.png"))); // NOI18N
        btnPayAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPayAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPayAddMouseExited(evt);
            }
        });
        btnPayAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayAddActionPerformed(evt);
            }
        });
        jPanel7.add(btnPayAdd);
        btnPayAdd.setBounds(10, 20, 140, 40);

        jLabel38.setBackground(new java.awt.Color(255, 255, 255));
        jLabel38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Head.png"))); // NOI18N
        jLabel38.setOpaque(true);
        jPanel7.add(jLabel38);
        jLabel38.setBounds(0, 0, 160, 10);

        jPanel5.add(jPanel7);
        jPanel7.setBounds(1030, 0, 160, 220);
        jPanel5.add(DatePickPayDate);
        DatePickPayDate.setBounds(150, 10, 300, 30);

        txtPayRepNo.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtPayRepNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPayRepNoMouseClicked(evt);
            }
        });
        jPanel5.add(txtPayRepNo);
        txtPayRepNo.setBounds(150, 50, 250, 30);

        txtAreaPayTo.setColumns(20);
        txtAreaPayTo.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtAreaPayTo.setRows(5);
        txtAreaPayTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAreaPayToMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(txtAreaPayTo);

        jPanel5.add(jScrollPane5);
        jScrollPane5.setBounds(150, 90, 300, 40);

        txtAreaPayFor.setColumns(20);
        txtAreaPayFor.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtAreaPayFor.setRows(5);
        txtAreaPayFor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAreaPayForMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(txtAreaPayFor);

        jPanel5.add(jScrollPane6);
        jScrollPane6.setBounds(150, 130, 300, 40);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setText(":");
        jPanel5.add(jLabel30);
        jLabel30.setBounds(660, 10, 10, 30);

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel31.setText(":");
        jPanel5.add(jLabel31);
        jLabel31.setBounds(660, 40, 10, 30);

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel32.setText(":");
        jPanel5.add(jLabel32);
        jLabel32.setBounds(660, 120, 10, 30);

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel33.setText(":");
        jPanel5.add(jLabel33);
        jLabel33.setBounds(660, 150, 10, 30);

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel34.setText(":");
        jPanel5.add(jLabel34);
        jLabel34.setBounds(660, 180, 10, 30);

        txtPaySub.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtPaySub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPaySubMouseClicked(evt);
            }
        });
        txtPaySub.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPaySubKeyReleased(evt);
            }
        });
        jPanel5.add(txtPaySub);
        txtPaySub.setBounds(680, 90, 300, 30);

        cmbPayBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Cash", "Check" }));
        cmbPayBy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbPayByMouseClicked(evt);
            }
        });
        jPanel5.add(cmbPayBy);
        cmbPayBy.setBounds(680, 50, 300, 30);

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel35.setText(":");
        jPanel5.add(jLabel35);
        jLabel35.setBounds(660, 90, 10, 30);

        txtPayTax.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtPayTax.setForeground(new java.awt.Color(153, 153, 153));
        txtPayTax.setText("Rs.");
        txtPayTax.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPayTaxMouseClicked(evt);
            }
        });
        txtPayTax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPayTaxKeyReleased(evt);
            }
        });
        jPanel5.add(txtPayTax);
        txtPayTax.setBounds(680, 120, 250, 30);

        txtPayDiscount.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtPayDiscount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPayDiscountMouseClicked(evt);
            }
        });
        txtPayDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPayDiscountKeyReleased(evt);
            }
        });
        jPanel5.add(txtPayDiscount);
        txtPayDiscount.setBounds(680, 150, 300, 30);

        txtPayTotal.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtPayTotal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPayTotalMouseClicked(evt);
            }
        });
        txtPayTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPayTotalActionPerformed(evt);
            }
        });
        jPanel5.add(txtPayTotal);
        txtPayTotal.setBounds(680, 180, 300, 30);

        txtPayRs.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtPayRs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPayRsMouseClicked(evt);
            }
        });
        txtPayRs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPayRsKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPayRsKeyTyped(evt);
            }
        });
        jPanel5.add(txtPayRs);
        txtPayRs.setBounds(680, 10, 300, 30);

        txtPayFrom.setEditable(false);
        txtPayFrom.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtPayFrom.setText("Finance Department");
        jPanel5.add(txtPayFrom);
        txtPayFrom.setBounds(150, 180, 300, 30);

        jButton1.setText("#");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1);
        jButton1.setBounds(400, 50, 50, 30);

        txtPayTaxPercent.setForeground(new java.awt.Color(153, 153, 153));
        txtPayTaxPercent.setText("%");
        txtPayTaxPercent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPayTaxPercentMouseClicked(evt);
            }
        });
        jPanel5.add(txtPayTaxPercent);
        txtPayTaxPercent.setBounds(930, 120, 50, 30);

        emp_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/HRMS_Images/MainBackForAll.jpg"))); // NOI18N
        emp_background.setPreferredSize(new java.awt.Dimension(1190, 570));
        jPanel5.add(emp_background);
        emp_background.setBounds(0, 0, 1200, 220);

        PnlPayments.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 1200, 220));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_Finance_Payments.png"))); // NOI18N
        jLabel3.setText("Finance Department Payments");
        PnlPayments.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, -1));

        jLayeredPane1.add(PnlPayments, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        PnlProfit.setMinimumSize(new java.awt.Dimension(1190, 580));
        PnlProfit.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlProfit.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jcmbProfitPeriod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Daily", "Weekly", "Monthly", "Annual", "Custom" }));
        jcmbProfitPeriod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcmbProfitPeriodMouseClicked(evt);
            }
        });
        jcmbProfitPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbProfitPeriodActionPerformed(evt);
            }
        });
        PnlProfit.add(jcmbProfitPeriod, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 90, -1));

        DatePickProfitFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatePickProfitFromActionPerformed(evt);
            }
        });
        PnlProfit.add(DatePickProfitFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 42, 150, 25));

        lblProfitFrom.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProfitFrom.setForeground(new java.awt.Color(255, 255, 255));
        lblProfitFrom.setText("For The");
        PnlProfit.add(lblProfitFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 42, 70, 25));

        jLabel42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_Profit_Header.png"))); // NOI18N
        PnlProfit.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 80));

        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableProfIncomes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "RepNo", "Payment", "Subtotal", "Pay Tax", "Discount", "Total"
            }
        ));
        jScrollPane11.setViewportView(jTableProfIncomes);

        jPanel9.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 600, 420));

        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel43.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_Profit_Accounts_Header.png"))); // NOI18N
        jPanel10.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1190, 30));

        jPanel9.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 30));

        jTableProfExpenses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "RepNo", "Sale", "Subtotal", "Sales Tax", "Discount", "Total"
            }
        ));
        jScrollPane12.setViewportView(jTableProfExpenses);

        jPanel9.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 30, 600, 420));

        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnProfCalculate.setText("Calculate");
        btnProfCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfCalculateActionPerformed(evt);
            }
        });
        jPanel11.add(btnProfCalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 220, 30));

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel44.setText("Total Income");
        jPanel11.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 110, 25));

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel45.setText("-");
        jPanel11.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 30, 25));

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel46.setText("Total Expense");
        jPanel11.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, 110, 25));

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel47.setText("=");
        jPanel11.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 10, -1, 25));

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel48.setText("Profit");
        jPanel11.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 10, 50, 25));

        txtProfTotIncome.setEditable(false);
        txtProfTotIncome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtProfTotIncome.setForeground(new java.awt.Color(255, 0, 0));
        jPanel11.add(txtProfTotIncome, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 150, 25));

        txtProfTotExpense.setEditable(false);
        txtProfTotExpense.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtProfTotExpense.setForeground(new java.awt.Color(255, 0, 0));
        jPanel11.add(txtProfTotExpense, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, 150, 25));

        txtProfTotProfit.setEditable(false);
        txtProfTotProfit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtProfTotProfit.setForeground(new java.awt.Color(255, 0, 0));
        jPanel11.add(txtProfTotProfit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 10, 150, 25));

        jPanel9.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 450, 1190, 50));

        PnlProfit.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1190, 500));

        jLayeredPane1.add(PnlProfit, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        PnlIncomeStmt.setMinimumSize(new java.awt.Dimension(1190, 580));
        PnlIncomeStmt.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlIncomeStmt.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(null);

        cmbISPeriod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "6 Months", "Month", "2 Weeks", "Week" }));
        jPanel6.add(cmbISPeriod);
        cmbISPeriod.setBounds(490, 40, 100, 25);

        DatePickISEndDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatePickISEndDateActionPerformed(evt);
            }
        });
        jPanel6.add(DatePickISEndDate);
        DatePickISEndDate.setBounds(650, 40, 120, 25);

        jLabel37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_IncomeStmt_Header.png"))); // NOI18N
        jPanel6.add(jLabel37);
        jLabel37.setBounds(0, 0, 1200, 80);

        PnlIncomeStmt.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 80));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel8.setLayout(null);

        jLabel39.setText("Record : ");
        jPanel8.add(jLabel39);
        jLabel39.setBounds(70, 10, 50, 20);

        cmbISAddTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Revenue", "Cost Of Goods/Services Sold", "Expenses", "Other Income" }));
        jPanel8.add(cmbISAddTo);
        cmbISAddTo.setBounds(590, 5, 120, 30);
        jPanel8.add(txtISValue);
        txtISValue.setBounds(390, 5, 130, 30);

        jLabel40.setText("Value : ");
        jPanel8.add(jLabel40);
        jLabel40.setBounds(350, 10, 40, 20);
        jPanel8.add(txtISRecord);
        txtISRecord.setBounds(120, 5, 220, 30);

        jLabel41.setText("Add To : ");
        jPanel8.add(jLabel41);
        jLabel41.setBounds(530, 10, 60, 20);

        btnISCalculate.setText("Calculate");
        btnISCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnISCalculateActionPerformed(evt);
            }
        });
        jPanel8.add(btnISCalculate);
        btnISCalculate.setBounds(1080, 10, 110, 23);

        btnISAdd.setText("Add");
        btnISAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnISAddActionPerformed(evt);
            }
        });
        jPanel8.add(btnISAdd);
        btnISAdd.setBounds(770, 10, 75, 23);

        btnISupdate.setText("Update");
        btnISupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnISupdateActionPerformed(evt);
            }
        });
        jPanel8.add(btnISupdate);
        btnISupdate.setBounds(840, 10, 75, 23);

        btnISRemove.setText("Remove");
        btnISRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnISRemoveActionPerformed(evt);
            }
        });
        jPanel8.add(btnISRemove);
        btnISRemove.setBounds(910, 10, 75, 23);

        btnISClear.setText("Clear");
        btnISClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnISClearActionPerformed(evt);
            }
        });
        jPanel8.add(btnISClear);
        btnISClear.setBounds(980, 10, 75, 23);

        PnlIncomeStmt.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1200, 40));

        jTableISRevenue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Revenue", "Value", "Total"
            }
        ));
        jTableISRevenue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableISRevenueMouseClicked(evt);
            }
        });
        jTableISRevenue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableISRevenueKeyReleased(evt);
            }
        });
        jScrollPane7.setViewportView(jTableISRevenue);

        PnlIncomeStmt.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 1190, 120));

        jTableISSold.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cost Of Goods/Services Sold", "", ""
            }
        ));
        jTableISSold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableISSoldMouseClicked(evt);
            }
        });
        jTableISSold.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableISSoldKeyReleased(evt);
            }
        });
        jScrollPane8.setViewportView(jTableISSold);

        PnlIncomeStmt.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 1190, 120));

        jTableISExpenses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Expenses", "", ""
            }
        ));
        jTableISExpenses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableISExpensesMouseClicked(evt);
            }
        });
        jTableISExpenses.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableISExpensesKeyReleased(evt);
            }
        });
        jScrollPane9.setViewportView(jTableISExpenses);

        PnlIncomeStmt.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 1190, 120));

        jTableISIncome.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Other Income", "", ""
            }
        ));
        jTableISIncome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableISIncomeMouseClicked(evt);
            }
        });
        jTableISIncome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableISIncomeKeyReleased(evt);
            }
        });
        jScrollPane10.setViewportView(jTableISIncome);

        PnlIncomeStmt.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 480, 1190, 100));

        jLayeredPane1.add(PnlIncomeStmt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        PnlCashFlow.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel17.setLayout(null);

        cmbCFSperiod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "6 Months", "3 Months", "Month", "2 Weeks", "1 Week" }));
        jPanel17.add(cmbCFSperiod);
        cmbCFSperiod.setBounds(490, 40, 100, 25);

        DatePickCFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatePickCFSActionPerformed(evt);
            }
        });
        jPanel17.add(DatePickCFS);
        DatePickCFS.setBounds(650, 40, 120, 25);

        jLabel83.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_CFS_Header.png"))); // NOI18N
        jPanel17.add(jLabel83);
        jLabel83.setBounds(0, 0, 1200, 80);

        PnlCashFlow.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 80));

        jPanel18.setBackground(new java.awt.Color(255, 255, 255));
        jPanel18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel18.setLayout(null);

        jLabel84.setText("Record :");
        jPanel18.add(jLabel84);
        jLabel84.setBounds(10, 10, 50, 20);
        jPanel18.add(txtCFSRecord);
        txtCFSRecord.setBounds(60, 5, 180, 30);

        jLabel85.setText("Add To :");
        jPanel18.add(jLabel85);
        jLabel85.setBounds(480, 10, 50, 20);
        jPanel18.add(txtCFSValue);
        txtCFSValue.setBounds(290, 5, 180, 30);

        jLabel86.setText("Value :");
        jPanel18.add(jLabel86);
        jLabel86.setBounds(250, 10, 50, 20);

        cmbCFSAddTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Operating Activities", "Investing Activities", "Financing Activities" }));
        jPanel18.add(cmbCFSAddTo);
        cmbCFSAddTo.setBounds(530, 5, 180, 30);

        btnCFScalculate.setText("Calculate");
        btnCFScalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCFScalculateActionPerformed(evt);
            }
        });
        jPanel18.add(btnCFScalculate);
        btnCFScalculate.setBounds(1080, 10, 110, 23);

        btnCFSadd.setText("Add");
        btnCFSadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCFSaddActionPerformed(evt);
            }
        });
        jPanel18.add(btnCFSadd);
        btnCFSadd.setBounds(760, 10, 75, 23);

        btnCFSupdate.setText("Update");
        btnCFSupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCFSupdateActionPerformed(evt);
            }
        });
        jPanel18.add(btnCFSupdate);
        btnCFSupdate.setBounds(830, 10, 75, 23);

        btnCFSremove.setText("Remove");
        btnCFSremove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCFSremoveActionPerformed(evt);
            }
        });
        jPanel18.add(btnCFSremove);
        btnCFSremove.setBounds(900, 10, 75, 23);

        btnCFSclear.setText("Clear");
        btnCFSclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCFSclearActionPerformed(evt);
            }
        });
        jPanel18.add(btnCFSclear);
        btnCFSclear.setBounds(970, 10, 75, 23);

        PnlCashFlow.add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1200, 40));

        jTableCFSOperating.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cash Flows From Operating Activities", "Value", "Total"
            }
        ));
        jTableCFSOperating.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCFSOperatingMouseClicked(evt);
            }
        });
        jTableCFSOperating.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableCFSOperatingKeyReleased(evt);
            }
        });
        jScrollPane21.setViewportView(jTableCFSOperating);

        PnlCashFlow.add(jScrollPane21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 1190, 160));

        jTableCFSInvesting.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cash Flows From Investing Activities", "", ""
            }
        ));
        jTableCFSInvesting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCFSInvestingMouseClicked(evt);
            }
        });
        jTableCFSInvesting.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableCFSInvestingKeyReleased(evt);
            }
        });
        jScrollPane22.setViewportView(jTableCFSInvesting);

        PnlCashFlow.add(jScrollPane22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 1190, 160));

        jTableCFSFinancing.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Cash Flows From Financing Activities", "", ""
            }
        ));
        jTableCFSFinancing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCFSFinancingMouseClicked(evt);
            }
        });
        jTableCFSFinancing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableCFSFinancingKeyReleased(evt);
            }
        });
        jScrollPane23.setViewportView(jTableCFSFinancing);

        PnlCashFlow.add(jScrollPane23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 440, 1190, 140));

        jLayeredPane1.add(PnlCashFlow, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1190, 580));

        PnlBalanceSheet.setMinimumSize(new java.awt.Dimension(1190, 580));
        PnlBalanceSheet.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlBalanceSheet.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel19.setLayout(null);

        DatePickBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatePickBSActionPerformed(evt);
            }
        });
        jPanel19.add(DatePickBS);
        DatePickBS.setBounds(560, 40, 130, 25);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_BS_Header.png"))); // NOI18N
        jPanel19.add(jLabel5);
        jLabel5.setBounds(0, 0, 1200, 80);

        PnlBalanceSheet.add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 80));

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel20.setLayout(null);

        jLabel87.setText("Record :");
        jPanel20.add(jLabel87);
        jLabel87.setBounds(10, 10, 50, 20);
        jPanel20.add(txtBSrecord);
        txtBSrecord.setBounds(60, 5, 200, 30);

        jLabel88.setText("Add To :");
        jPanel20.add(jLabel88);
        jLabel88.setBounds(500, 10, 50, 20);
        jPanel20.add(txtBSvalue);
        txtBSvalue.setBounds(330, 5, 150, 30);

        jLabel89.setText("Value :");
        jPanel20.add(jLabel89);
        jLabel89.setBounds(280, 10, 50, 20);

        cmbBSaddto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Current Assets", "Long-Term Assets", "Current Liabilities", "Long-Term Liabilities", "Owners Equity" }));
        jPanel20.add(cmbBSaddto);
        cmbBSaddto.setBounds(550, 5, 150, 30);

        btnBScalculate.setLabel("Calculate");
        btnBScalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBScalculateActionPerformed(evt);
            }
        });
        jPanel20.add(btnBScalculate);
        btnBScalculate.setBounds(1100, 10, 90, 23);

        btnBSadd.setText("Add");
        btnBSadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBSaddActionPerformed(evt);
            }
        });
        jPanel20.add(btnBSadd);
        btnBSadd.setBounds(800, 10, 75, 23);

        btnBSupdate.setLabel("Update");
        btnBSupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBSupdateActionPerformed(evt);
            }
        });
        jPanel20.add(btnBSupdate);
        btnBSupdate.setBounds(870, 10, 75, 23);

        btnBSremove.setLabel("Remove");
        btnBSremove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBSremoveActionPerformed(evt);
            }
        });
        jPanel20.add(btnBSremove);
        btnBSremove.setBounds(940, 10, 75, 23);

        btnBSclear.setLabel("Clear");
        btnBSclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBSclearActionPerformed(evt);
            }
        });
        jPanel20.add(btnBSclear);
        btnBSclear.setBounds(1010, 10, 75, 23);

        PnlBalanceSheet.add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1200, 40));

        jTableBSCurrentAss.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Current Assets", "Value", "Total"
            }
        ));
        jTableBSCurrentAss.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBSCurrentAssMouseClicked(evt);
            }
        });
        jTableBSCurrentAss.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBSCurrentAssKeyReleased(evt);
            }
        });
        jScrollPane24.setViewportView(jTableBSCurrentAss);

        PnlBalanceSheet.add(jScrollPane24, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 600, 220));

        jTableBSLongAss.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Long-Term Assets", "", ""
            }
        ));
        jTableBSLongAss.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBSLongAssMouseClicked(evt);
            }
        });
        jTableBSLongAss.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBSLongAssKeyReleased(evt);
            }
        });
        jScrollPane25.setViewportView(jTableBSLongAss);

        PnlBalanceSheet.add(jScrollPane25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 600, 180));

        jPanel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel21.setLayout(null);

        txtBSTotalAss.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtBSTotalAss.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel21.add(txtBSTotalAss);
        txtBSTotalAss.setBounds(390, 0, 210, 30);

        jLabel93.setBackground(new java.awt.Color(255, 255, 255));
        jLabel93.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel93.setText("Total Assets:");
        jLabel93.setOpaque(true);
        jPanel21.add(jLabel93);
        jLabel93.setBounds(0, 0, 390, 30);

        PnlBalanceSheet.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 540, 600, 30));

        jTableBSCurrentLib.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Current Liabilities", "Value", "Total"
            }
        ));
        jTableBSCurrentLib.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBSCurrentLibMouseClicked(evt);
            }
        });
        jTableBSCurrentLib.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBSCurrentLibKeyReleased(evt);
            }
        });
        jScrollPane26.setViewportView(jTableBSCurrentLib);

        PnlBalanceSheet.add(jScrollPane26, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 140, 590, 100));

        jTableBSLongLib.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Long-Term Liabilities", "", ""
            }
        ));
        jTableBSLongLib.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBSLongLibMouseClicked(evt);
            }
        });
        jTableBSLongLib.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBSLongLibKeyReleased(evt);
            }
        });
        jScrollPane27.setViewportView(jTableBSLongLib);

        PnlBalanceSheet.add(jScrollPane27, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 240, 590, 100));

        jTableBSEquity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Owner's Equity", "", ""
            }
        ));
        jTableBSEquity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableBSEquityMouseClicked(evt);
            }
        });
        jTableBSEquity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableBSEquityKeyReleased(evt);
            }
        });
        jScrollPane28.setViewportView(jTableBSEquity);

        PnlBalanceSheet.add(jScrollPane28, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 360, 590, 180));

        jPanel22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel22.setLayout(null);

        txtBSTotalLibAndEquity1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtBSTotalLibAndEquity1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel22.add(txtBSTotalLibAndEquity1);
        txtBSTotalLibAndEquity1.setBounds(390, 0, 200, 30);

        jLabel92.setBackground(new java.awt.Color(255, 255, 255));
        jLabel92.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel92.setText("Total Liabilities And Owner's Equity:");
        jLabel92.setOpaque(true);
        jPanel22.add(jLabel92);
        jLabel92.setBounds(0, 0, 390, 30);

        PnlBalanceSheet.add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 540, 590, 30));

        jLabel6.setBackground(new java.awt.Color(0, 51, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_BS_Equity.png"))); // NOI18N
        PnlBalanceSheet.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, -1, -1));

        jLabel90.setBackground(new java.awt.Color(255, 255, 255));
        jLabel90.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel90.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_BS_Assets.png"))); // NOI18N
        PnlBalanceSheet.add(jLabel90, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, -1, -1));

        jLabel91.setBackground(new java.awt.Color(0, 51, 255));
        jLabel91.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel91.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel91.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_BS_Liabilities.png"))); // NOI18N
        PnlBalanceSheet.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 120, -1, -1));

        emp_background1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/HRMS_Images/MainBackForAll.jpg"))); // NOI18N
        emp_background1.setMaximumSize(new java.awt.Dimension(1190, 580));
        emp_background1.setMinimumSize(new java.awt.Dimension(1190, 580));
        emp_background1.setPreferredSize(new java.awt.Dimension(1190, 580));
        PnlBalanceSheet.add(emp_background1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLayeredPane1.add(PnlBalanceSheet, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 1190, 580));

        PnlMenu.setPreferredSize(new java.awt.Dimension(1200, 100));
        PnlMenu.setLayout(null);

        btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_B.png"))); // NOI18N
        btnMenuHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMenuHomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMenuHomeMouseExited(evt);
            }
        });
        btnMenuHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuHomeActionPerformed(evt);
            }
        });
        PnlMenu.add(btnMenuHome);
        btnMenuHome.setBounds(110, 30, 140, 30);

        btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png"))); // NOI18N
        btnMenuAccounts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMenuAccountsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMenuAccountsMouseExited(evt);
            }
        });
        btnMenuAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuAccountsActionPerformed(evt);
            }
        });
        PnlMenu.add(btnMenuAccounts);
        btnMenuAccounts.setBounds(250, 30, 140, 30);

        btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png"))); // NOI18N
        btnMenuPayments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMenuPaymentsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMenuPaymentsMouseExited(evt);
            }
        });
        btnMenuPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuPaymentsActionPerformed(evt);
            }
        });
        PnlMenu.add(btnMenuPayments);
        btnMenuPayments.setBounds(390, 30, 140, 30);

        btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png"))); // NOI18N
        btnMenuProfit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMenuProfitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMenuProfitMouseExited(evt);
            }
        });
        btnMenuProfit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuProfitActionPerformed(evt);
            }
        });
        PnlMenu.add(btnMenuProfit);
        btnMenuProfit.setBounds(530, 30, 140, 30);

        btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png"))); // NOI18N
        btnMenuIncome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMenuIncomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMenuIncomeMouseExited(evt);
            }
        });
        btnMenuIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuIncomeActionPerformed(evt);
            }
        });
        PnlMenu.add(btnMenuIncome);
        btnMenuIncome.setBounds(670, 30, 140, 30);

        btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png"))); // NOI18N
        btnMenuCash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMenuCashMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMenuCashMouseExited(evt);
            }
        });
        btnMenuCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuCashActionPerformed(evt);
            }
        });
        PnlMenu.add(btnMenuCash);
        btnMenuCash.setBounds(810, 30, 140, 30);

        btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png"))); // NOI18N
        btnMenuBalance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMenuBalanceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMenuBalanceMouseExited(evt);
            }
        });
        btnMenuBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuBalanceActionPerformed(evt);
            }
        });
        PnlMenu.add(btnMenuBalance);
        btnMenuBalance.setBounds(950, 30, 140, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Back4.png"))); // NOI18N
        PnlMenu.add(jLabel1);
        jLabel1.setBounds(0, 0, 1200, 70);

        getContentPane().add(PnlMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
public String currentPanel = "Home";
    private void btnMenuAccountsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuAccountsMouseEntered
        // TODO add your handling code here:
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_B.png")));
    }//GEN-LAST:event_btnMenuAccountsMouseEntered

    private void btnMenuAccountsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuAccountsMouseExited
        // TODO add your handling code here:
        if (currentPanel.equals("Accounts")) {
            this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_B.png")));
        } else {
            this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        }
    }//GEN-LAST:event_btnMenuAccountsMouseExited

    private void btnMenuAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuAccountsActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(true);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Accounts";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_B.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatepickReceipts.setDate(CurrentDate);
        this.DatepickReceipts.setFormats(new String[]{"yyyy-MM-dd"});

        //CLearing Account Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableReceipts.getModel();
            dtm.setNumRows(0);

            DefaultTableModel dtm1 = (DefaultTableModel) jTableIncome.getModel();
            dtm1.setNumRows(0);

            DefaultTableModel dtm2 = (DefaultTableModel) jTableExpense.getModel();
            dtm2.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Accounts Table Data Connot Clear");
        }

        //Loading Account Tables
        LoadReceiptsTable();
        LoadIncomeTable();
        LoadExpenseTable();
    }//GEN-LAST:event_btnMenuAccountsActionPerformed

    private void btnMenuPaymentsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuPaymentsMouseEntered
        // TODO add your handling code here:
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_B.png")));
    }//GEN-LAST:event_btnMenuPaymentsMouseEntered

    private void btnMenuPaymentsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuPaymentsMouseExited
        // TODO add your handling code here:
        if (currentPanel.equals("Payments")) {
            this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_B.png")));
        } else {
            this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        }
    }//GEN-LAST:event_btnMenuPaymentsMouseExited

    private void btnMenuPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuPaymentsActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(true);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Payments";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_B.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting Current Date & Format on Payments Date Pickers
        Date CurrentDate = new Date();
        this.DatePickPayDate.setDate(CurrentDate);
        this.DatePickPayDate.setFormats(new String[]{"yyyy-MM-dd"});
        this.DatePickPayTable.setDate(CurrentDate);
        this.DatePickPayTable.setFormats(new String[]{"yyyy-MM-dd"});

        //Clearing & Loading Current day Payments
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
        }

        LoadPayTable();
    }//GEN-LAST:event_btnMenuPaymentsActionPerformed

    private void btnMenuProfitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuProfitMouseEntered
        // TODO add your handling code here:
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_B.png")));
    }//GEN-LAST:event_btnMenuProfitMouseEntered

    private void btnMenuProfitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuProfitMouseExited
        // TODO add your handling code here:
        if (currentPanel.equals("Profit")) {
            this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_B.png")));
        } else {
            this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        }
    }//GEN-LAST:event_btnMenuProfitMouseExited

    private void btnMenuProfitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuProfitActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(true);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Profit";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_B.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));
        
        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatePickProfitFrom.setDate(CurrentDate);
        this.DatePickProfitFrom.setFormats(new String[]{"yyyy-MM-dd"});

        //CLearing Account Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableProfIncomes.getModel();
            dtm.setNumRows(0);

            DefaultTableModel dtm1 = (DefaultTableModel) jTableProfExpenses.getModel();
            dtm1.setNumRows(0);

           
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Table Data Connot Clear");
        }

        //Loading Tables
        LoadProfIncomeTable();
        LoadProfExpenseTable();
    }//GEN-LAST:event_btnMenuProfitActionPerformed

    private void btnMenuIncomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuIncomeMouseEntered
        // TODO add your handling code here:
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_B.png")));
    }//GEN-LAST:event_btnMenuIncomeMouseEntered

    private void btnMenuIncomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuIncomeMouseExited
        // TODO add your handling code here:
        if (currentPanel.equals("Income")) {
            this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_B.png")));
        } else {
            this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        }
    }//GEN-LAST:event_btnMenuIncomeMouseExited

    private void btnMenuIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuIncomeActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(true);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Income";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_B.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting table Culum Width
        this.jTableISRevenue.getColumn("Revenue").setMaxWidth(900);
        this.jTableISRevenue.getColumn("Revenue").setMinWidth(900);
        this.jTableISSold.getColumn("Cost Of Goods/Services Sold").setMaxWidth(900);
        this.jTableISSold.getColumn("Cost Of Goods/Services Sold").setMinWidth(900);
        this.jTableISExpenses.getColumn("Expenses").setMaxWidth(900);
        this.jTableISExpenses.getColumn("Expenses").setMinWidth(900);
        this.jTableISIncome.getColumn("Other Income").setMaxWidth(900);
        this.jTableISIncome.getColumn("Other Income").setMinWidth(900);

        //Setting jTable Column Allignment
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        this.jTableISRevenue.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISRevenue.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableISSold.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISSold.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableISExpenses.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISExpenses.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableISIncome.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISIncome.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);

        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatePickISEndDate.setDate(CurrentDate);
        this.DatePickISEndDate.setFormats(new String[]{"yyyy-MM-dd"});

        //Cearing & Loading Income Statement Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableISRevenue.getModel();
            dtm.setNumRows(0);
            DefaultTableModel dtm1 = (DefaultTableModel) jTableISSold.getModel();
            dtm1.setNumRows(0);
            DefaultTableModel dtm2 = (DefaultTableModel) jTableISExpenses.getModel();
            dtm2.setNumRows(0);
            DefaultTableModel dtm3 = (DefaultTableModel) jTableISIncome.getModel();
            dtm3.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Statement Tables Connot Clear");
        }
        LoadAllISTable();
    }//GEN-LAST:event_btnMenuIncomeActionPerformed

    private void btnMenuCashMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuCashMouseEntered
        // TODO add your handling code here:
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_B.png")));
    }//GEN-LAST:event_btnMenuCashMouseEntered

    private void btnMenuCashMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuCashMouseExited
        // TODO add your handling code here:
        if (currentPanel.equals("Cash")) {
            this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_B.png")));
        } else {
            this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        }
    }//GEN-LAST:event_btnMenuCashMouseExited

    private void btnMenuCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuCashActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(true);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Cash";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_B.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting table Culum Width
        this.jTableCFSOperating.getColumn("Cash Flows From Operating Activities").setMaxWidth(900);
        this.jTableCFSOperating.getColumn("Cash Flows From Operating Activities").setMinWidth(900);
        this.jTableCFSInvesting.getColumn("Cash Flows From Investing Activities").setMaxWidth(900);
        this.jTableCFSInvesting.getColumn("Cash Flows From Investing Activities").setMinWidth(900);
        this.jTableCFSFinancing.getColumn("Cash Flows From Financing Activities").setMaxWidth(900);
        this.jTableCFSFinancing.getColumn("Cash Flows From Financing Activities").setMinWidth(900);

        //Setting jTable Column Allignment
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        this.jTableCFSOperating.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableCFSOperating.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableCFSInvesting.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableCFSInvesting.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableCFSFinancing.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableCFSFinancing.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);

        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatePickCFS.setDate(CurrentDate);
        this.DatePickCFS.setFormats(new String[]{"yyyy-MM-dd"});

        //Cearing & Loading Cash-Flow Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableCFSOperating.getModel();
            dtm.setNumRows(0);
            DefaultTableModel dtm1 = (DefaultTableModel) jTableCFSInvesting.getModel();
            dtm1.setNumRows(0);
            DefaultTableModel dtm2 = (DefaultTableModel) jTableCFSFinancing.getModel();
            dtm2.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Cash-Flows Statement Tables Connot Clear");
        }
        LoadAllCFSTable();
    }//GEN-LAST:event_btnMenuCashActionPerformed

    private void btnMenuBalanceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuBalanceMouseEntered
        // TODO add your handling code here:
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_B.png")));
    }//GEN-LAST:event_btnMenuBalanceMouseEntered

    private void btnMenuBalanceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuBalanceMouseExited
        // TODO add your handling code here:
        if (currentPanel.equals("Balance")) {
            this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_B.png")));
        } else {
            this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));
        }
    }//GEN-LAST:event_btnMenuBalanceMouseExited

    private void btnMenuBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuBalanceActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(true);

        //Set Current panel
        currentPanel = "Balance";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_B.png")));

        //Setting table Culum Width
        this.jTableBSCurrentAss.getColumn("Current Assets").setMaxWidth(300);
        this.jTableBSCurrentAss.getColumn("Current Assets").setMinWidth(300);
        this.jTableBSLongAss.getColumn("Long-Term Assets").setMaxWidth(300);
        this.jTableBSLongAss.getColumn("Long-Term Assets").setMinWidth(300);
        this.jTableBSCurrentLib.getColumn("Current Liabilities").setMaxWidth(300);
        this.jTableBSCurrentLib.getColumn("Current Liabilities").setMinWidth(300);
        this.jTableBSLongLib.getColumn("Long-Term Liabilities").setMaxWidth(300);
        this.jTableBSLongLib.getColumn("Long-Term Liabilities").setMinWidth(300);
        this.jTableBSEquity.getColumn("Owner's Equity").setMaxWidth(300);
        this.jTableBSEquity.getColumn("Owner's Equity").setMinWidth(300);

        //Setting jTable Column Allignment
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        this.jTableBSCurrentAss.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSCurrentAss.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSLongAss.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSLongAss.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSCurrentLib.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSCurrentLib.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSLongLib.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSLongLib.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSEquity.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSEquity.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);

        //Setting Current Date & Format on Date Picker
        Date CurrentDate = new Date();
        this.DatePickBS.setDate(CurrentDate);
        this.DatePickBS.setFormats(new String[]{"yyyy-MM-dd"});

        //Cearing & Loading Balance Sheet Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableBSCurrentAss.getModel();
            dtm.setNumRows(0);

            DefaultTableModel dtm1 = (DefaultTableModel) jTableBSLongAss.getModel();
            dtm1.setNumRows(0);

            DefaultTableModel dtm2 = (DefaultTableModel) jTableBSCurrentLib.getModel();
            dtm2.setNumRows(0);

            DefaultTableModel dtm3 = (DefaultTableModel) jTableBSLongLib.getModel();
            dtm3.setNumRows(0);

            DefaultTableModel dtm4 = (DefaultTableModel) jTableBSEquity.getModel();
            dtm4.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Balance Sheet Tables Connot Clear");
        }
        LoadAllBSTable();
    }//GEN-LAST:event_btnMenuBalanceActionPerformed

    private void btnMenuHomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuHomeMouseEntered
        // TODO add your handling code here:
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_B.png")));
    }//GEN-LAST:event_btnMenuHomeMouseEntered

    private void btnMenuHomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMenuHomeMouseExited
        // TODO add your handling code here:
        if (currentPanel.equals("Home")) {
            this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_B.png")));
        } else {
            this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        }
    }//GEN-LAST:event_btnMenuHomeMouseExited

    private void btnMenuHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuHomeActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(true);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Home";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_B.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));
    }//GEN-LAST:event_btnMenuHomeActionPerformed

    private void DatePickBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatePickBSActionPerformed
        //Cearing & Loading Balance Sheet Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableBSCurrentAss.getModel();
            dtm.setNumRows(0);

            DefaultTableModel dtm1 = (DefaultTableModel) jTableBSLongAss.getModel();
            dtm1.setNumRows(0);

            DefaultTableModel dtm2 = (DefaultTableModel) jTableBSCurrentLib.getModel();
            dtm2.setNumRows(0);

            DefaultTableModel dtm3 = (DefaultTableModel) jTableBSLongLib.getModel();
            dtm3.setNumRows(0);

            DefaultTableModel dtm4 = (DefaultTableModel) jTableBSEquity.getModel();
            dtm4.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Balance Sheet Tables Connot Clear");
        }
        LoadAllBSTable();
        
        //Clear Totals
        this.txtBSTotalAss.setText("");
        this.txtBSTotalLibAndEquity1.setText("");
    }//GEN-LAST:event_DatePickBSActionPerformed

    private void btnBScalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBScalculateActionPerformed

        //Cal Button Handling
        int rowCount = this.jTableBSCurrentAss.getRowCount();
        if(rowCount >= 1){
        
        Object jtRow = this.jTableBSEquity.getValueAt(this.jTableBSEquity.getModel().getRowCount()-1,0);
        String jtLastValue = jtRow.toString();
        
        if(jtLastValue != "Total Owners Equity"){            
        //Calculating Total Current Assets
        double TotCurrentAss = 0;
        double TotCurrentAssDouble = 0;
        String TotCurrentAssValue = null;
        int rowsTotCurrentAss = jTableBSCurrentAss.getRowCount();

        for (int i = 0; i < rowsTotCurrentAss; i++) {
            TotCurrentAssValue = jTableBSCurrentAss.getModel().getValueAt(i, 1).toString();

            TotCurrentAssDouble = Double.parseDouble(TotCurrentAssValue);
            TotCurrentAss = TotCurrentAss + TotCurrentAssDouble;

        }

        //Adding Net Cash Operating to Operating table
        Object[] row = {"Total Current Assets", "", TotCurrentAss};
        DefaultTableModel model = (DefaultTableModel) this.jTableBSCurrentAss.getModel();
        model.addRow(row);

        //Calculating Total Long-Term Assets
        double TotLongAss = 0;
        double TotLongAssDouble = 0;
        String TotLongAssValue = null;
        int rowsTotLongAss = jTableBSLongAss.getRowCount();

        for (int i = 0; i < rowsTotLongAss; i++) {
            TotLongAssValue = jTableBSLongAss.getModel().getValueAt(i, 1).toString();

            TotLongAssDouble = Double.parseDouble(TotLongAssValue);
            TotLongAss = TotLongAss + TotLongAssDouble;

        }

        //Adding Net Cash Operating to Operating table
        Object[] row1 = {"Total Long-Term Assets", "", TotLongAss};
        DefaultTableModel model1 = (DefaultTableModel) this.jTableBSLongAss.getModel();
        model1.addRow(row1);

        //Calculating Total Current Liabilities
        double TotCurLib = 0;
        double TotCurLibDouble = 0;
        String TotCurLibValue = null;
        int rowsTotCurLib = jTableBSCurrentLib.getRowCount();

        for (int i = 0; i < rowsTotCurLib; i++) {
            TotCurLibValue = jTableBSCurrentLib.getModel().getValueAt(i, 1).toString();

            TotCurLibDouble = Double.parseDouble(TotCurLibValue);
            TotCurLib = TotCurLib + TotCurLibDouble;

        }

        //Adding Net Cash Financing to Financing table
        Object[] row2 = {"Total Current Liabilities", "", TotCurLib};
        DefaultTableModel model2 = (DefaultTableModel) this.jTableBSCurrentLib.getModel();
        model2.addRow(row2);

        //Calculating Total Long-Term Liabilities
        double TotLongLib = 0;
        double TotLongLibDouble = 0;
        String TotLongLibValue = null;
        int rowsTotLongLib = jTableBSLongLib.getRowCount();

        for (int i = 0; i < rowsTotLongLib; i++) {
            TotLongLibValue = jTableBSLongLib.getModel().getValueAt(i, 1).toString();

            TotLongLibDouble = Double.parseDouble(TotLongLibValue);
            TotLongLib = TotLongLib + TotLongLibDouble;

        }

        //Adding Net Cash Financing to Financing table
        Object[] row3 = {"Total Long-Term Liabilities", "", TotLongLib};
        DefaultTableModel model3 = (DefaultTableModel) this.jTableBSLongLib.getModel();
        model3.addRow(row3);

        //Calculating Total Liabilites
        double TotalLib = TotCurLib + TotLongLib;
        //Adding Gross Pofit/loss to Cost table
        Object[] row4 = {"Total Liabilities", "", TotalLib};
        DefaultTableModel model4 = (DefaultTableModel) this.jTableBSLongLib.getModel();
        model4.addRow(row4);

        //Calculating Total Owners Euqity
        double TotEquity = 0;
        double TotEquityDouble = 0;
        String TotEquityValue = null;
        int rowsTotEquity = jTableBSEquity.getRowCount();

        for (int i = 0; i < rowsTotEquity; i++) {
            TotEquityValue = jTableBSEquity.getModel().getValueAt(i, 1).toString();

            TotEquityDouble = Double.parseDouble(TotEquityValue);
            TotEquity = TotEquity + TotEquityDouble;

        }

        //Adding Net Cash Financing to Financing table
        Object[] row5 = {"Total Owners Equity", "", TotEquity};
        DefaultTableModel model5 = (DefaultTableModel) this.jTableBSEquity.getModel();
        model5.addRow(row5);

        //Calculating Total Assets
        double TotalAssets = TotCurrentAss + TotLongAss;
        String TotalAssetsString = String.valueOf(TotalAssets);

        //Calculating Total Owners Equity & Total Liabilities
        double TotalLibAndEquity = TotalLib + TotEquity;
        String TotalLibAndEquityString = String.valueOf(TotalLibAndEquity);

        //Adding and Changing Text Colour According to the balance
        if (TotalAssets != TotalLibAndEquity) {
            this.txtBSTotalAss.setForeground(Color.red);
            this.txtBSTotalLibAndEquity1.setForeground(Color.red);

            this.txtBSTotalAss.setText(TotalAssetsString);
            this.txtBSTotalLibAndEquity1.setText(TotalLibAndEquityString);
        } else {
            this.txtBSTotalAss.setForeground(Color.black);
            this.txtBSTotalLibAndEquity1.setForeground(Color.black);

            this.txtBSTotalAss.setText(TotalAssetsString);
            this.txtBSTotalLibAndEquity1.setText(TotalLibAndEquityString);
        }
        }else{
            JOptionPane.showMessageDialog(this, "Please Reload Tables");
        }
        
        }else{
            JOptionPane.showMessageDialog(this, "Please Insert Table Data");
        }
    }//GEN-LAST:event_btnBScalculateActionPerformed

    private void btnBSaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBSaddActionPerformed
        //Checking textfields are empty
        if (this.txtBSrecord.getText().equals("") || this.txtBSvalue.getText().equals("") || this.cmbBSaddto.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Details");
        } else {
            AddBS();

            //Clearing & Loading Related jTable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableBSCurrentAss.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableBSLongAss.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableBSCurrentLib.getModel();
                dtm2.setNumRows(0);

                DefaultTableModel dtm3 = (DefaultTableModel) jTableBSLongLib.getModel();
                dtm3.setNumRows(0);

                DefaultTableModel dtm4 = (DefaultTableModel) jTableBSEquity.getModel();
                dtm4.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Balance Sheet Data Connot Clear");
            }

            //Loading jTables
            LoadAllBSTable();

            //Clearing Texfield contents
            this.txtBSrecord.setText("");
            this.txtBSvalue.setText("");
            this.cmbBSaddto.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnBSaddActionPerformed

    private void btnBSupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBSupdateActionPerformed
        //Checking textfields are empty
        if (this.txtBSrecord.getText().equals("") || this.txtBSvalue.getText().equals("") || this.cmbBSaddto.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Details");
        } else {
            UpdateBS();

            //Clearing & Loading Related jTable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableBSCurrentAss.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableBSLongAss.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableBSCurrentLib.getModel();
                dtm2.setNumRows(0);

                DefaultTableModel dtm3 = (DefaultTableModel) jTableBSLongLib.getModel();
                dtm3.setNumRows(0);

                DefaultTableModel dtm4 = (DefaultTableModel) jTableBSEquity.getModel();
                dtm4.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Balance Sheet Data Connot Clear");
            }

            //Loading jTables
            LoadAllBSTable();

            //Clearing Texfield contents
            this.txtBSrecord.setText("");
            this.txtBSvalue.setText("");
            this.cmbBSaddto.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnBSupdateActionPerformed

    private void btnBSremoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBSremoveActionPerformed
        ///Checking textfields are empty
        if (this.txtBSrecord.getText().equals("") || this.txtBSvalue.getText().equals("") || this.cmbBSaddto.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Select The Record You Want To Remove");
        } else {
            RemoveBS();

            //Clearing & Loading Related jTable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableBSCurrentAss.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableBSLongAss.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableBSCurrentLib.getModel();
                dtm2.setNumRows(0);

                DefaultTableModel dtm3 = (DefaultTableModel) jTableBSLongLib.getModel();
                dtm3.setNumRows(0);

                DefaultTableModel dtm4 = (DefaultTableModel) jTableBSEquity.getModel();
                dtm4.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Balance Sheet Data Connot Clear");
            }

            //Loading jTables
            LoadAllBSTable();

            //Clearing Texfield contents
            this.txtBSrecord.setText("");
            this.txtBSvalue.setText("");
            this.cmbBSaddto.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnBSremoveActionPerformed

    private void btnBSclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBSclearActionPerformed
        //Clearing Texfield contents
        this.txtBSrecord.setText("");
        this.txtBSvalue.setText("");
        this.cmbBSaddto.setSelectedItem("Select");
    }//GEN-LAST:event_btnBSclearActionPerformed

    private void jTableBSCurrentAssMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBSCurrentAssMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSCurrentAss.getSelectedRow();
        String jtRecord = jTableBSCurrentAss.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSCurrentAss.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Current Assets");
    }//GEN-LAST:event_jTableBSCurrentAssMouseClicked

    private void jTableBSCurrentAssKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBSCurrentAssKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSCurrentAss.getSelectedRow();
        String jtRecord = jTableBSCurrentAss.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSCurrentAss.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Current Assets");
    }//GEN-LAST:event_jTableBSCurrentAssKeyReleased

    private void jTableBSLongAssMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBSLongAssMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSLongAss.getSelectedRow();
        String jtRecord = jTableBSLongAss.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSLongAss.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Long-Term Assets");
    }//GEN-LAST:event_jTableBSLongAssMouseClicked

    private void jTableBSLongAssKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBSLongAssKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSLongAss.getSelectedRow();
        String jtRecord = jTableBSLongAss.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSLongAss.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Long-Term Assets");
    }//GEN-LAST:event_jTableBSLongAssKeyReleased

    private void jTableBSCurrentLibMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBSCurrentLibMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSCurrentLib.getSelectedRow();
        String jtRecord = jTableBSCurrentLib.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSCurrentLib.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Current Liabilities");
    }//GEN-LAST:event_jTableBSCurrentLibMouseClicked

    private void jTableBSCurrentLibKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBSCurrentLibKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSCurrentLib.getSelectedRow();
        String jtRecord = jTableBSCurrentLib.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSCurrentLib.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Current Liabilities");
    }//GEN-LAST:event_jTableBSCurrentLibKeyReleased

    private void jTableBSLongLibMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBSLongLibMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSLongLib.getSelectedRow();
        String jtRecord = jTableBSLongLib.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSLongLib.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Long-Term Liabilities");
    }//GEN-LAST:event_jTableBSLongLibMouseClicked

    private void jTableBSLongLibKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBSLongLibKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSLongLib.getSelectedRow();
        String jtRecord = jTableBSLongLib.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSLongLib.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Long-Term Liabilities");
    }//GEN-LAST:event_jTableBSLongLibKeyReleased

    private void jTableBSEquityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableBSEquityMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSEquity.getSelectedRow();
        String jtRecord = jTableBSEquity.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSEquity.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Owners Equity");
    }//GEN-LAST:event_jTableBSEquityMouseClicked

    private void jTableBSEquityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableBSEquityKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableBSEquity.getSelectedRow();
        String jtRecord = jTableBSEquity.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableBSEquity.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtBSrecord.setText(jtRecord);
        this.txtBSvalue.setText(jtValue);
        this.cmbBSaddto.setSelectedItem("Owners Equity");
    }//GEN-LAST:event_jTableBSEquityKeyReleased

    private void DatePickCFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatePickCFSActionPerformed
        //Cearing & Loading Cash-Flow Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableCFSOperating.getModel();
            dtm.setNumRows(0);
            DefaultTableModel dtm1 = (DefaultTableModel) jTableCFSInvesting.getModel();
            dtm1.setNumRows(0);
            DefaultTableModel dtm2 = (DefaultTableModel) jTableCFSFinancing.getModel();
            dtm2.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Cash-Flows Statement Tables Connot Clear");
        }
        LoadAllCFSTable();
    }//GEN-LAST:event_DatePickCFSActionPerformed

    private void btnCFScalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCFScalculateActionPerformed

        //Cal Button Handling
        int rowCount = this.jTableCFSOperating.getRowCount();
        if(rowCount >= 1){
        
        Object jtRow = this.jTableCFSFinancing.getValueAt(this.jTableCFSFinancing.getModel().getRowCount()-1,0);
        String jtLastValue = jtRow.toString();
        
        if(jtLastValue != "Ending Cash Balance"){        
        //Calculating Net Cash Operating in Operating Table
        double netOperating = 0;
        double OperatingDouble = 0;
        String OperatingValue = null;
        int rowsOperating = jTableCFSOperating.getRowCount();

        for (int i = 0; i < rowsOperating; i++) {
            OperatingValue = jTableCFSOperating.getModel().getValueAt(i, 1).toString();

            OperatingDouble = Double.parseDouble(OperatingValue);
            netOperating = netOperating + OperatingDouble;

        }

        //Adding Net Cash Operating to Operating table
        Object[] row = {"Net Cash Provided By Operating Activities", "", netOperating};
        DefaultTableModel model = (DefaultTableModel) this.jTableCFSOperating.getModel();
        model.addRow(row);

        //Calculating Net Cash Investing in Investing Table
        double netInvesting = 0;
        double InvestingDouble = 0;
        String InvestingValue = null;
        int rowsInvesting = jTableCFSInvesting.getRowCount();

        for (int i = 0; i < rowsInvesting; i++) {
            InvestingValue = jTableCFSInvesting.getModel().getValueAt(i, 1).toString();

            InvestingDouble = Double.parseDouble(InvestingValue);
            netInvesting = netInvesting + InvestingDouble;

        }

        //Adding Net Cash Operating to Operating table
        Object[] row1 = {"Net Cash Used In Investing Activities", "", netInvesting};
        DefaultTableModel model1 = (DefaultTableModel) this.jTableCFSInvesting.getModel();
        model1.addRow(row1);

        //Calculating Net Cash Financing in Financing Table
        double netFinancing = 0;
        double FinancingDouble = 0;
        String FinancingValue = null;
        int rowsFinancing = jTableCFSFinancing.getRowCount();

        for (int i = 0; i < rowsFinancing; i++) {
            FinancingValue = jTableCFSFinancing.getModel().getValueAt(i, 1).toString();

            FinancingDouble = Double.parseDouble(FinancingValue);
            netFinancing = netFinancing + FinancingDouble;

        }

        //Adding Net Cash Financing to Financing table
        Object[] row2 = {"Net Cash Provided In Financing Activities", "", netFinancing};
        DefaultTableModel model2 = (DefaultTableModel) this.jTableCFSFinancing.getModel();
        model2.addRow(row2);

        //Calculating Net Increase/Decrese
        double NetIncDec = netOperating + netInvesting + netFinancing;
        //Adding Gross Pofit/loss to Cost table
        Object[] row3 = {"Net Increase/Decrease In Cash", "", NetIncDec};
        DefaultTableModel model3 = (DefaultTableModel) this.jTableCFSFinancing.getModel();
        model3.addRow(row3);

        //Calculating Ending Cash balance
        double BeginBal;
        BeginBal = Double.parseDouble(JOptionPane.showInputDialog(this, "Enter Begining Cash Balance"));
        //Begining balance
        Object[] row4 = {"Begining Cash Balance", "", BeginBal};
        DefaultTableModel model4 = (DefaultTableModel) this.jTableCFSFinancing.getModel();
        model4.addRow(row4);

        double EndingBal = BeginBal + NetIncDec;
        //Ending balance
        Object[] row5 = {"Ending Cash Balance", "", EndingBal};
        DefaultTableModel model5 = (DefaultTableModel) this.jTableCFSFinancing.getModel();
        model5.addRow(row5);
          
        }else{
            JOptionPane.showMessageDialog(this, "Please Reload Tables");
        }
        
        }else{
            JOptionPane.showMessageDialog(this, "Please Insert Table Data");
        }
    }//GEN-LAST:event_btnCFScalculateActionPerformed

    private void btnCFSaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCFSaddActionPerformed
        //Checking textfields are empty
        if (this.txtCFSRecord.getText().equals("") || this.txtCFSValue.getText().equals("") || this.cmbCFSAddTo.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Details");
        } else {
            AddCFS();

            //Clearing & Loading Related jTable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableCFSOperating.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableCFSInvesting.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableCFSFinancing.getModel();
                dtm2.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Income Statement Data Connot Clear");
            }

            //Loading jTables
            LoadAllCFSTable();

            //Clearing Texfield contents
            this.txtCFSRecord.setText("");
            this.txtCFSValue.setText("");
            this.cmbCFSAddTo.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnCFSaddActionPerformed

    private void btnCFSupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCFSupdateActionPerformed
        //Checking textfields are empty
        if (this.txtCFSRecord.getText().equals("") || this.txtCFSValue.getText().equals("") || this.cmbCFSAddTo.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Details");
        } else {

            //Updating IS Tables
            UpdateCFS();
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableCFSOperating.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableCFSInvesting.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableCFSFinancing.getModel();
                dtm2.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Cash-Flows Data Connot Clear");
            }

            //Loading jTables
            LoadAllCFSTable();

            //Clearing Texfield contents
            this.txtCFSRecord.setText("");
            this.txtCFSValue.setText("");
            this.cmbCFSAddTo.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnCFSupdateActionPerformed

    private void btnCFSremoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCFSremoveActionPerformed
        //Checking textfields are empty
        if (this.txtCFSRecord.getText().equals("") || this.txtCFSValue.getText().equals("") || this.cmbCFSAddTo.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Select The Record You Want To Remove");
        } else {

            //Updating IS Tables
            RemoveCFS();
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableCFSOperating.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableCFSInvesting.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableCFSFinancing.getModel();
                dtm2.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Cash-Flows Statement Data Connot Clear");
            }

            //Loading jTables
            LoadAllCFSTable();

            //Clearing Texfield contents
            this.txtCFSRecord.setText("");
            this.txtCFSValue.setText("");
            this.cmbCFSAddTo.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnCFSremoveActionPerformed

    private void btnCFSclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCFSclearActionPerformed
        //Clearing Texfield contents
        this.txtCFSRecord.setText("");
        this.txtCFSValue.setText("");
        this.cmbCFSAddTo.setSelectedItem("Select");
    }//GEN-LAST:event_btnCFSclearActionPerformed

    private void jTableCFSOperatingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCFSOperatingMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableCFSOperating.getSelectedRow();
        String jtRecord = jTableCFSOperating.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableCFSOperating.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtCFSRecord.setText(jtRecord);
        this.txtCFSValue.setText(jtValue);
        this.cmbCFSAddTo.setSelectedItem("Operating Activities");
    }//GEN-LAST:event_jTableCFSOperatingMouseClicked

    private void jTableCFSOperatingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCFSOperatingKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableCFSOperating.getSelectedRow();
        String jtRecord = jTableCFSOperating.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableCFSOperating.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtCFSRecord.setText(jtRecord);
        this.txtCFSValue.setText(jtValue);
        this.cmbCFSAddTo.setSelectedItem("Operating Activities");
    }//GEN-LAST:event_jTableCFSOperatingKeyReleased

    private void jTableCFSInvestingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCFSInvestingMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableCFSInvesting.getSelectedRow();
        String jtRecord = jTableCFSInvesting.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableCFSInvesting.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtCFSRecord.setText(jtRecord);
        this.txtCFSValue.setText(jtValue);
        this.cmbCFSAddTo.setSelectedItem("Investing Activities");
    }//GEN-LAST:event_jTableCFSInvestingMouseClicked

    private void jTableCFSInvestingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCFSInvestingKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableCFSInvesting.getSelectedRow();
        String jtRecord = jTableCFSInvesting.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableCFSInvesting.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtCFSRecord.setText(jtRecord);
        this.txtCFSValue.setText(jtValue);
        this.cmbCFSAddTo.setSelectedItem("Investing Activities");
    }//GEN-LAST:event_jTableCFSInvestingKeyReleased

    private void jTableCFSFinancingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCFSFinancingMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableCFSFinancing.getSelectedRow();
        String jtRecord = jTableCFSFinancing.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableCFSFinancing.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtCFSRecord.setText(jtRecord);
        this.txtCFSValue.setText(jtValue);
        this.cmbCFSAddTo.setSelectedItem("Financing Activities");
    }//GEN-LAST:event_jTableCFSFinancingMouseClicked

    private void jTableCFSFinancingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCFSFinancingKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableCFSFinancing.getSelectedRow();
        String jtRecord = jTableCFSFinancing.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableCFSFinancing.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtCFSRecord.setText(jtRecord);
        this.txtCFSValue.setText(jtValue);
        this.cmbCFSAddTo.setSelectedItem("Financing Activities");
    }//GEN-LAST:event_jTableCFSFinancingKeyReleased

    private void DatePickISEndDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatePickISEndDateActionPerformed
        //Cearing & Loading Income Statement Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableISRevenue.getModel();
            dtm.setNumRows(0);
            DefaultTableModel dtm1 = (DefaultTableModel) jTableISSold.getModel();
            dtm1.setNumRows(0);
            DefaultTableModel dtm2 = (DefaultTableModel) jTableISExpenses.getModel();
            dtm2.setNumRows(0);
            DefaultTableModel dtm3 = (DefaultTableModel) jTableISIncome.getModel();
            dtm3.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Statement Tables Connot Clear");
        }
        LoadAllISTable();
    }//GEN-LAST:event_DatePickISEndDateActionPerformed

    private void btnISCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnISCalculateActionPerformed
        
        //Cal Button Handling
        int rowCount = this.jTableISRevenue.getRowCount();
        if(rowCount >= 1){
            
        Object jtRow = this.jTableISIncome.getValueAt(this.jTableISIncome.getModel().getRowCount()-1,0);
        String jtLastValue = jtRow.toString();
        
        if(jtLastValue != "Net Income/Loss"){
        //Calculating Net Sales in Revenue Table
        double netSales = 0;
        double valueInt = 0;
        String RevenueValue = null;
        int rows = jTableISRevenue.getRowCount();

        for (int i = 0; i < rows; i++) {
            RevenueValue = jTableISRevenue.getModel().getValueAt(i, 1).toString();

            valueInt = Integer.parseInt(RevenueValue);
            netSales = netSales + valueInt;

        }

        //Adding NetSales to Revenue table
        Object[] row = {"Net Sales", "", netSales};
        DefaultTableModel model = (DefaultTableModel) this.jTableISRevenue.getModel();
        model.addRow(row);

        //Calculating Cost of Goods Sold in Cost Table
        double CostOfGoods = 0;
        double CostInt = 0;
        String GoodsValue = null;
        int rowsCost = this.jTableISSold.getRowCount();

        for (int i = 0; i < rowsCost; i++) {
            GoodsValue = jTableISSold.getModel().getValueAt(i, 1).toString();
            CostInt = Integer.parseInt(GoodsValue);
            CostOfGoods = CostOfGoods + CostInt;
        }

        //Adding Cost of Goods to Cost table
        Object[] row1 = {"Cost Of Goods Sold", "", "-" + CostOfGoods};
        DefaultTableModel model1 = (DefaultTableModel) this.jTableISSold.getModel();
        model1.addRow(row1);

        //Calculating Gross Profit/Loss
        double grossProfit = netSales - CostOfGoods;
        //Adding Gross Pofit/loss to Cost table
        Object[] row2 = {"Gross Profit/Loss", "", grossProfit};
        DefaultTableModel model2 = (DefaultTableModel) this.jTableISSold.getModel();
        model2.addRow(row2);

        //Calculating Total Expenses in Expenses Table
        double TotalExpens = 0;
        double ExpInt = 0;
        String ExpenseValue = null;
        int rowsExpense = this.jTableISExpenses.getRowCount();

        for (int i = 0; i < rowsExpense; i++) {
            ExpenseValue = jTableISExpenses.getModel().getValueAt(i, 1).toString();
            ExpInt = Integer.parseInt(ExpenseValue);
            TotalExpens = TotalExpens + ExpInt;
        }

        //Adding Cost of Goods to Cost table
        Object[] row3 = {"Total Expenses", "", "-" + TotalExpens};
        DefaultTableModel model3 = (DefaultTableModel) this.jTableISExpenses.getModel();
        model3.addRow(row3);

        //Calculating Net Operating Income
        double NetOperating = grossProfit - TotalExpens;
        //Adding Gross Pofit/loss to Cost table
        Object[] row4 = {"Net Operating Income", "", NetOperating};
        DefaultTableModel model4 = (DefaultTableModel) this.jTableISExpenses.getModel();
        model4.addRow(row4);

        //Calculating Total Other Income in Other Income Table
        double TotalOtherIn = 0;
        double OtherInInt = 0;
        String OtherInValue = null;
        int rowsOtherIn = this.jTableISIncome.getRowCount();

        for (int i = 0; i < rowsOtherIn; i++) {
            OtherInValue = jTableISIncome.getModel().getValueAt(i, 1).toString();
            OtherInInt = Integer.parseInt(OtherInValue);
            TotalOtherIn = TotalOtherIn + OtherInInt;
        }

        //Adding Cost of Goods to Cost table
        Object[] row5 = {"Total Other Income", "", TotalOtherIn};
        DefaultTableModel model5 = (DefaultTableModel) this.jTableISIncome.getModel();
        model5.addRow(row5);

        //Calculating Net Income
        double NetIncome = NetOperating + TotalOtherIn;
        //Adding Gross Pofit/loss to Cost table
        Object[] row6 = {"Net Income/Loss", "", NetIncome};
        DefaultTableModel model6 = (DefaultTableModel) this.jTableISIncome.getModel();
        model6.addRow(row6);

        }else{
            JOptionPane.showMessageDialog(this, "Please Reload Tables");
        }
        
        }else{
            JOptionPane.showMessageDialog(this, "Please Insert Table Data");
        }
 
    }//GEN-LAST:event_btnISCalculateActionPerformed

    private void btnISAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnISAddActionPerformed
        //Checking textfields are empty
        if (this.txtISRecord.getText().equals("") || this.txtISValue.getText().equals("") || this.cmbISAddTo.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Details");
        } else {
            AddIS();

            //Clearing & Loading Related jTable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableISRevenue.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableISSold.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableISExpenses.getModel();
                dtm2.setNumRows(0);

                DefaultTableModel dtm3 = (DefaultTableModel) jTableISIncome.getModel();
                dtm3.setNumRows(0);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Income Statement Data Connot Clear");
            }

            //Loading jTables
            LoadAllISTable();

            //Clearing Texfield contents
            this.txtISRecord.setText("");
            this.txtISValue.setText("");
            this.cmbISAddTo.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnISAddActionPerformed

    private void btnISupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnISupdateActionPerformed
        //Checking textfields are empty
        if (this.txtISRecord.getText().equals("") || this.txtISValue.getText().equals("") || this.cmbISAddTo.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Details");
        } else {

            //Updating IS Tables
            UpdateIS();
            //Clearing & Loading Related jTable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableISRevenue.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableISSold.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableISExpenses.getModel();
                dtm2.setNumRows(0);

                DefaultTableModel dtm3 = (DefaultTableModel) jTableISIncome.getModel();
                dtm3.setNumRows(0);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Income Statement Data Connot Clear");
            }

            //Loading jTables
            LoadAllISTable();

            //Clearing Texfield contents
            this.txtISRecord.setText("");
            this.txtISValue.setText("");
            this.cmbISAddTo.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnISupdateActionPerformed

    private void btnISRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnISRemoveActionPerformed
        //Checking textfields are empty
        if (this.txtISRecord.getText().equals("") || this.txtISValue.getText().equals("") || this.cmbISAddTo.getSelectedItem().equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please Select The Record You Want To Remove");
        } else {

            //Updating IS Tables
            RemoveIS();
            //Clearing & Loading Related jTable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableISRevenue.getModel();
                dtm.setNumRows(0);

                DefaultTableModel dtm1 = (DefaultTableModel) jTableISSold.getModel();
                dtm1.setNumRows(0);

                DefaultTableModel dtm2 = (DefaultTableModel) jTableISExpenses.getModel();
                dtm2.setNumRows(0);

                DefaultTableModel dtm3 = (DefaultTableModel) jTableISIncome.getModel();
                dtm3.setNumRows(0);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Income Statement Data Connot Clear");
            }

            //Loading jTables
            LoadAllISTable();

            //Clearing Texfield contents
            this.txtISRecord.setText("");
            this.txtISValue.setText("");
            this.cmbISAddTo.setSelectedItem("Select");
        }
    }//GEN-LAST:event_btnISRemoveActionPerformed

    private void btnISClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnISClearActionPerformed
        //Clearing Texfield contents
        this.txtISRecord.setText("");
        this.txtISValue.setText("");
        this.cmbISAddTo.setSelectedItem("Select");
    }//GEN-LAST:event_btnISClearActionPerformed

    private void jTableISRevenueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableISRevenueMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableISRevenue.getSelectedRow();
        String jtRecord = jTableISRevenue.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISRevenue.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Revenue");
    }//GEN-LAST:event_jTableISRevenueMouseClicked

    private void jTableISRevenueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableISRevenueKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableISRevenue.getSelectedRow();
        String jtRecord = jTableISRevenue.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISRevenue.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Revenue");
    }//GEN-LAST:event_jTableISRevenueKeyReleased

    private void jTableISSoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableISSoldMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableISSold.getSelectedRow();
        String jtRecord = jTableISSold.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISSold.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Cost Of Goods/Services Sold");
    }//GEN-LAST:event_jTableISSoldMouseClicked

    private void jTableISSoldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableISSoldKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableISSold.getSelectedRow();
        String jtRecord = jTableISSold.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISSold.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Cost Of Goods/Services Sold");
    }//GEN-LAST:event_jTableISSoldKeyReleased

    private void jTableISExpensesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableISExpensesMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableISExpenses.getSelectedRow();
        String jtRecord = jTableISExpenses.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISExpenses.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Expenses");
    }//GEN-LAST:event_jTableISExpensesMouseClicked

    private void jTableISExpensesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableISExpensesKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableISExpenses.getSelectedRow();
        String jtRecord = jTableISExpenses.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISExpenses.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Expenses");
    }//GEN-LAST:event_jTableISExpensesKeyReleased

    private void jTableISIncomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableISIncomeMouseClicked
        //Selecting & Getting Table Data
        int jtRow = this.jTableISIncome.getSelectedRow();
        String jtRecord = jTableISIncome.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISIncome.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Other Income");
    }//GEN-LAST:event_jTableISIncomeMouseClicked

    private void jTableISIncomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableISIncomeKeyReleased
        //Selecting & Getting Table Data
        int jtRow = this.jTableISIncome.getSelectedRow();
        String jtRecord = jTableISIncome.getModel().getValueAt(jtRow, 0).toString();
        String jtValue = jTableISIncome.getModel().getValueAt(jtRow, 1).toString();

        //Setting Textfield Contents
        this.txtISRecord.setText(jtRecord);
        this.txtISValue.setText(jtValue);
        this.cmbISAddTo.setSelectedItem("Other Income");
    }//GEN-LAST:event_jTableISIncomeKeyReleased

    private void jTablePaymentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePaymentsMouseClicked
        //Selecting & Getting Payment Table Data
        int jtRow = this.jTablePayments.getSelectedRow();
        String jtDate = jTablePayments.getModel().getValueAt(jtRow, 0).toString();
        String jtRepno = jTablePayments.getModel().getValueAt(jtRow, 1).toString();
        String jtPayto = jTablePayments.getModel().getValueAt(jtRow, 2).toString();
        String jtPayfor = jTablePayments.getModel().getValueAt(jtRow, 3).toString();
        String jtPayrs = jTablePayments.getModel().getValueAt(jtRow, 5).toString();
        String jtPayby = jTablePayments.getModel().getValueAt(jtRow, 6).toString();
        String jtPaysub = jTablePayments.getModel().getValueAt(jtRow, 7).toString();
        String jtPaytax = jTablePayments.getModel().getValueAt(jtRow, 8).toString();
        String jtPayDis = jTablePayments.getModel().getValueAt(jtRow, 9).toString();
        String jtPaytot = jTablePayments.getModel().getValueAt(jtRow, 10).toString();

        //Setting Textfield Contents
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate = null;
        try {
            startDate = df.parse(jtDate);
        } catch (ParseException e) {

        }
        this.DatePickPayDate.setDate(startDate);
        this.txtPayRepNo.setText(jtRepno);
        this.txtAreaPayTo.setText(jtPayto);
        this.txtAreaPayFor.setText(jtPayfor);
        this.txtPayRs.setText(jtPayrs);
        this.cmbPayBy.setSelectedItem(jtPayby);
        this.txtPaySub.setText(jtPaysub);
        this.txtPayTax.setText(jtPaytax);
        this.txtPayDiscount.setText(jtPayDis);
        this.txtPayTotal.setText(jtPaytot);
        this.txtPayTax.setForeground(Color.black);

    }//GEN-LAST:event_jTablePaymentsMouseClicked

    private void jTablePaymentsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTablePaymentsKeyReleased
        //Selecting & Getting Payment Table Data
        int jtRow = this.jTablePayments.getSelectedRow();
        String jtDate = jTablePayments.getModel().getValueAt(jtRow, 0).toString();
        String jtRepno = jTablePayments.getModel().getValueAt(jtRow, 1).toString();
        String jtPayto = jTablePayments.getModel().getValueAt(jtRow, 2).toString();
        String jtPayfor = jTablePayments.getModel().getValueAt(jtRow, 3).toString();
        String jtPayrs = jTablePayments.getModel().getValueAt(jtRow, 5).toString();
        String jtPayby = jTablePayments.getModel().getValueAt(jtRow, 6).toString();
        String jtPaysub = jTablePayments.getModel().getValueAt(jtRow, 7).toString();
        String jtPaytax = jTablePayments.getModel().getValueAt(jtRow, 8).toString();
        String jtPayDis = jTablePayments.getModel().getValueAt(jtRow, 9).toString();
        String jtPaytot = jTablePayments.getModel().getValueAt(jtRow, 10).toString();

        //Setting Textfield Contents
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        Date startDate = null;
        try {
            startDate = df.parse(jtDate);
        } catch (ParseException e) {

        }
        this.DatePickPayDate.setDate(startDate);
        this.txtPayRepNo.setText(jtRepno);
        this.txtAreaPayTo.setText(jtPayto);
        this.txtAreaPayFor.setText(jtPayfor);
        this.txtPayRs.setText(jtPayrs);
        this.cmbPayBy.setSelectedItem(jtPayby);
        this.txtPaySub.setText(jtPaysub);
        this.txtPayTax.setText(jtPaytax);
        this.txtPayDiscount.setText(jtPayDis);
        this.txtPayTotal.setText(jtPaytot);
        this.txtPayTax.setForeground(Color.black);
    }//GEN-LAST:event_jTablePaymentsKeyReleased

    private void DatePickPayTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatePickPayTableActionPerformed
        //Clearing Payments Table
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
        }

        //Calling to LoadpayTable Method
        //############Date Validation & Loading tables#############
        //Getting Date from DatePicker
        Date RecDate = this.DatePickPayTable.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //Getting Current date
        Date todayDate = new Date();
        DateFormat todayFormat = new SimpleDateFormat("yyyy-MM-dd");
        String todayDateString = todayFormat.format(todayDate);

        //Checking Date
        if ((todayDateString.equals(RecDateString)) || (RecDate.before(todayDate))) {
            //Load Payments Table
            LoadPayTable();
        } else {
            JOptionPane.showMessageDialog(this, "Select Current Date or Past Date!");
            //Load Payments Table
            LoadPayTable();
        }

    }//GEN-LAST:event_DatePickPayTableActionPerformed

    private void btnDatePreviousMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDatePreviousMouseEntered
        //Changing Button Image
        this.btnDatePrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Previous_B.png")));
    }//GEN-LAST:event_btnDatePreviousMouseEntered

    private void btnDatePreviousMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDatePreviousMouseExited
        //Changing Button Image
        this.btnDatePrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Previous.png")));
    }//GEN-LAST:event_btnDatePreviousMouseExited

    private void btnDatePreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatePreviousActionPerformed
        //Setting Previous day to Selected day in DatePicker
        Date CurrentDate = this.DatePickPayTable.getDate();
        Date nextdate = new Date();
        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        final Date date = CurrentDate;
        final Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_YEAR, -1);
        nextdate = calendar.getTime();
        this.DatePickPayTable.setDate(nextdate);

        //Clearing Payments Table
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
        }

        //Calling to LoadpayTable Method
        LoadPayTable();

    }//GEN-LAST:event_btnDatePreviousActionPerformed

    private void btnDateNextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDateNextMouseEntered
        //Changing Button Image
        this.btnDateNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Next_B.png")));
    }//GEN-LAST:event_btnDateNextMouseEntered

    private void btnDateNextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDateNextMouseExited
        //Changing Button Image
        this.btnDateNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Next.png")));
    }//GEN-LAST:event_btnDateNextMouseExited

    private void btnDateNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDateNextActionPerformed
        //Setting Next day to Selected day in DatePicker
        Date CurrentDate = this.DatePickPayTable.getDate();
        Date nextdate = new Date();
        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        final Date date = CurrentDate;
        final Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        nextdate = calendar.getTime();
        this.DatePickPayTable.setDate(nextdate);

        //Clearing Payments Table
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
        }

        //Calling to LoadpayTable Method
        //############Date Validation & Loading tables#############
        //Getting Date from DatePicker
        Date RecDate = this.DatePickPayTable.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //Getting Current date
        Date todayDate = new Date();
        DateFormat todayFormat = new SimpleDateFormat("yyyy-MM-dd");
        String todayDateString = todayFormat.format(todayDate);

        //Checking Date
        if ((todayDateString.equals(RecDateString)) || (RecDate.before(todayDate))) {
            //Load Payments Table
            LoadPayTable();
        } else {
            JOptionPane.showMessageDialog(this, "Select Current Date or Past Date!");
            //Load Payments Table
            LoadPayTable();
        }

    }//GEN-LAST:event_btnDateNextActionPerformed

    private void btnPayUpdateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayUpdateMouseEntered
        //Changing Button Image
        this.btnPayUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_UpdtPayment_Fill.png")));
    }//GEN-LAST:event_btnPayUpdateMouseEntered

    private void btnPayUpdateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayUpdateMouseExited
        //Changing Button Image
        this.btnPayUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_UpdtPayment_Border.png")));
    }//GEN-LAST:event_btnPayUpdateMouseExited

    private void btnPayUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayUpdateActionPerformed
        //Checking Textfields are Empty
        if ((this.DatePickPayDate.getDate() == null)
                || (this.txtPayRepNo.getText().equals(""))
                || (this.txtAreaPayTo.getText().equals(""))
                || (this.txtAreaPayFor.getText().equals(""))
                || (this.txtPayFrom.getText().equals(""))
                || (this.txtPayRs.getText().equals(""))
                || (this.cmbPayBy.getSelectedItem().equals("Select"))
                || (this.txtPaySub.getText().equals(""))
                || (this.txtPayTax.getText().equals(""))
                || (this.txtPayDiscount.getText().equals(""))
                || (this.txtPayTotal.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Informations!");
        } else {
            //Calling to Update Method
            UpdatePayments();

            //Clearing Textfields
            this.DatePickPayDate.setDate(null);
            this.txtPayRepNo.setText("");
            this.txtAreaPayTo.setText("");
            this.txtAreaPayFor.setText("");
            this.txtPayRs.setText("");
            this.cmbPayBy.setSelectedItem("Select");
            this.txtPaySub.setText("");
            this.txtPayDiscount.setText("");
            this.txtPayTotal.setText("");
            this.txtPayTax.setText("Rs.");
            this.txtPayTax.setForeground(Color.DARK_GRAY);
            this.txtPayTaxPercent.setText("%");
            this.txtPayTaxPercent.setForeground(Color.DARK_GRAY);
        }
        //Clearing jTable & Calling to Loadpaytable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
        }
        LoadPayTable();
    }//GEN-LAST:event_btnPayUpdateActionPerformed

    private void btnPayRmvPaymentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayRmvPaymentMouseEntered
        //Changing Button Image
        this.btnPayRmvPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_RmvPayment_Fill.png")));
    }//GEN-LAST:event_btnPayRmvPaymentMouseEntered

    private void btnPayRmvPaymentMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayRmvPaymentMouseExited
        //Changing Button Image
        this.btnPayRmvPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_RmvPayment_Border.png")));
    }//GEN-LAST:event_btnPayRmvPaymentMouseExited

    private void btnPayRmvPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayRmvPaymentActionPerformed
        //Checking payment is selected then calling to RemovePayment method
        if (this.txtPayRepNo.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please Select Record From \"Finance Department Receipts\" Table");
        } else {
            RemovePayment();

            //Clearing jTable & Calling to Loadpaytable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
                dtm.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
            }
            LoadPayTable();

            //Clearing Textfields
            this.DatePickPayDate.setDate(null);
            this.txtPayRepNo.setText("");
            this.txtAreaPayTo.setText("");
            this.txtAreaPayFor.setText("");
            this.txtPayRs.setText("");
            this.cmbPayBy.setSelectedItem("Select");
            this.txtPaySub.setText("");
            this.txtPayDiscount.setText("");
            this.txtPayTotal.setText("");
            this.txtPayTax.setText("Rs.");
            this.txtPayTax.setForeground(Color.DARK_GRAY);
            this.txtPayTaxPercent.setText("%");
            this.txtPayTaxPercent.setForeground(Color.DARK_GRAY);
        }
    }//GEN-LAST:event_btnPayRmvPaymentActionPerformed

    private void btnPayClearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayClearMouseEntered
        //Changing Button Image
        this.btnPayClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_ClrPayment_Fill.png")));
    }//GEN-LAST:event_btnPayClearMouseEntered

    private void btnPayClearMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayClearMouseExited
        //Changing Button Image
        this.btnPayClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_ClrPayment_Border.png")));
    }//GEN-LAST:event_btnPayClearMouseExited

    private void btnPayClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayClearActionPerformed
        //Clearing Textfields
        this.DatePickPayDate.setDate(null);
        this.txtPayRepNo.setText("");
        this.txtAreaPayTo.setText("");
        this.txtAreaPayFor.setText("");
        this.txtPayRs.setText("");
        this.cmbPayBy.setSelectedItem("Select");
        this.txtPaySub.setText("");
        this.txtPayTax.setText("Rs.");
        this.txtPayTax.setForeground(Color.gray);
        this.txtPayDiscount.setText("");
        this.txtPayTotal.setText("");
        this.txtPayTaxPercent.setText("%");
        this.txtPayTaxPercent.setForeground(Color.gray);
        JOptionPane.showMessageDialog(this, "Filled Contents Cleared!");

    }//GEN-LAST:event_btnPayClearActionPerformed

    private void btnPayAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayAddMouseEntered
        //Changing Button Image
        this.btnPayAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_AddPayment_Fill.png")));
    }//GEN-LAST:event_btnPayAddMouseEntered

    private void btnPayAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPayAddMouseExited
        //Changing Button Image
        this.btnPayAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_AddPayment_Border.png")));
    }//GEN-LAST:event_btnPayAddMouseExited

    private void btnPayAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayAddActionPerformed
        //Checking Textfields are Empty
        if ((this.DatePickPayDate.getDate() == null)
                || (this.txtPayRepNo.getText().equals(""))
                || (this.txtAreaPayTo.getText().equals(""))
                || (this.txtAreaPayFor.getText().equals(""))
                || (this.txtPayFrom.getText().equals(""))
                || (this.txtPayRs.getText().equals(""))
                || (this.cmbPayBy.getSelectedItem().equals("Select"))
                || (this.txtPaySub.getText().equals(""))
                || (this.txtPayTax.getText().equals(""))
                || (this.txtPayDiscount.getText().equals(""))
                || (this.txtPayTotal.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "Please Fill All The Informations!");
        } else {
            //Calling to AddPayment Method
            AddPayment();

            //Clearing Textfields
            this.DatePickPayDate.setDate(null);
            this.txtPayRepNo.setText("");
            this.txtAreaPayTo.setText("");
            this.txtAreaPayFor.setText("");
            this.txtPayRs.setText("");
            this.cmbPayBy.setSelectedItem("Select");
            this.txtPaySub.setText("");
            this.txtPayDiscount.setText("");
            this.txtPayTotal.setText("");
            this.txtPayTax.setText("Rs.");
            this.txtPayTax.setForeground(Color.DARK_GRAY);
            this.txtPayTaxPercent.setText("%");
            this.txtPayTaxPercent.setForeground(Color.DARK_GRAY);

            //Clearing jTable & Calling to Loadpaytable
            try {
                DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
                dtm.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
            }
            LoadPayTable();
        }

    }//GEN-LAST:event_btnPayAddActionPerformed

    private void txtPayRepNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPayRepNoMouseClicked
        //Clear Textfield
        if (txtPayRepNo.getText().equals("Enter Receipt No")) {
            txtPayRepNo.setForeground(Color.black);
            txtPayRepNo.setText("");
        }
    }//GEN-LAST:event_txtPayRepNoMouseClicked

    private void txtAreaPayToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAreaPayToMouseClicked
        //Cheking RepNo is Empty
        if (txtPayRepNo.getText().equals("")) {
            txtPayRepNo.setForeground(Color.red);
            txtPayRepNo.setText("Enter Receipt No");
        }

        //Clear Textfield
        if (txtAreaPayTo.getText().equals("Enter Pay To")) {
            txtAreaPayTo.setForeground(Color.black);
            txtAreaPayTo.setText("");
        }
    }//GEN-LAST:event_txtAreaPayToMouseClicked

    private void txtAreaPayForMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAreaPayForMouseClicked
        //Cheking Payto is Empty
        if (txtAreaPayTo.getText().equals("")) {
            txtAreaPayTo.setForeground(Color.red);
            txtAreaPayTo.setText("Enter Pay To");
        }

        //Clear Textfield
        if (txtAreaPayFor.getText().equals("Enter For")) {
            txtAreaPayFor.setForeground(Color.black);
            txtAreaPayFor.setText("");
        }
    }//GEN-LAST:event_txtAreaPayForMouseClicked

    private void txtPaySubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPaySubMouseClicked

        //Clear Textfield
        if (txtPaySub.getText().equals("Enter Subtotal") || txtPaySub.getText().equals("Please Enter Numeric Value")) {
            txtPaySub.setForeground(Color.black);
            txtPaySub.setText("");
        }
    }//GEN-LAST:event_txtPaySubMouseClicked

    private void txtPaySubKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaySubKeyReleased
        //Checking Numeric or Letter
        if ((this.txtPaySub.getText().charAt(0) == '0')
                || (this.txtPaySub.getText().charAt(0) == '1')
                || (this.txtPaySub.getText().charAt(0) == '2')
                || (this.txtPaySub.getText().charAt(0) == '3')
                || (this.txtPaySub.getText().charAt(0) == '4')
                || (this.txtPaySub.getText().charAt(0) == '5')
                || (this.txtPaySub.getText().charAt(0) == '6')
                || (this.txtPaySub.getText().charAt(0) == '7')
                || (this.txtPaySub.getText().charAt(0) == '8')
                || (this.txtPaySub.getText().charAt(0) == '9')) {
        } else {
            this.txtPaySub.setForeground(Color.red);
            this.txtPaySub.setText("Please Enter Numeric Value");
        }
    }//GEN-LAST:event_txtPaySubKeyReleased

    private void cmbPayByMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbPayByMouseClicked
        //Cheking Payto is Empty
        if (txtPayRs.getText().equals("")) {
            txtPayRs.setForeground(Color.red);
            txtPayRs.setText("Enter Rupees");
        }
        //Clear Textfield
        if (txtPaySub.getText().equals("Enter Subtotal") || txtPaySub.getText().equals("Please Enter Numeric Value")) {
            this.txtPaySub.setForeground(Color.black);
        }
    }//GEN-LAST:event_cmbPayByMouseClicked

    private void txtPayTaxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPayTaxMouseClicked
        //Cheking Payto is Empty
        if (txtPaySub.getText().equals("")) {
            txtPaySub.setForeground(Color.red);
            txtPaySub.setText("Enter Subtotal");
        }

        //Clear Textfield
        if (txtPayTax.getText().equals("Enter Pay Tax") || txtPayTax.getText().equals("Please Enter Numeric Value")) {
            txtPayTax.setForeground(Color.black);
            txtPayTax.setText("");
        }

        //Calculating Tax
        if ((this.txtPayTaxPercent.getText().equals("%")) || (this.txtPayTaxPercent.getText().equals(""))) {
            //Clearing Textfield
            this.txtPayTax.setText("");
            this.txtPayTax.setForeground(Color.black);
        } else {
            double paysub = Double.parseDouble(this.txtPaySub.getText());
            double paytaxPercent = Double.parseDouble(this.txtPayTaxPercent.getText());
            double totalTax = ((paysub * paytaxPercent) / 100.0);
            this.txtPayTax.setText(String.valueOf(totalTax));

        }
    }//GEN-LAST:event_txtPayTaxMouseClicked

    private void txtPayTaxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPayTaxKeyReleased
        //Checking Numeric or Letter
        if ((this.txtPayTax.getText().charAt(0) == '0')
                || (this.txtPayTax.getText().charAt(0) == '1')
                || (this.txtPayTax.getText().charAt(0) == '2')
                || (this.txtPayTax.getText().charAt(0) == '3')
                || (this.txtPayTax.getText().charAt(0) == '4')
                || (this.txtPayTax.getText().charAt(0) == '5')
                || (this.txtPayTax.getText().charAt(0) == '6')
                || (this.txtPayTax.getText().charAt(0) == '7')
                || (this.txtPayTax.getText().charAt(0) == '8')
                || (this.txtPayTax.getText().charAt(0) == '9')) {
        } else {
            this.txtPayTax.setForeground(Color.red);
            this.txtPayTax.setText("Please Enter Numeric Value");
        }
    }//GEN-LAST:event_txtPayTaxKeyReleased

    private void txtPayDiscountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPayDiscountMouseClicked
        //Cheking Payto is Empty
        if (txtPayTax.getText().equals("") || txtPayTax.getText().equals("Rs.")) {
            txtPayTax.setForeground(Color.red);
            txtPayTax.setText("Enter Pay Tax");
        }

        //Clear Textfield
        if (txtPayDiscount.getText().equals("Enter Discount") || txtPayDiscount.getText().equals("Please Enter Numeric Value")) {
            txtPayDiscount.setForeground(Color.black);
            txtPayDiscount.setText("");
        }
    }//GEN-LAST:event_txtPayDiscountMouseClicked

    private void txtPayDiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPayDiscountKeyReleased
        //Checking Numeric or Letter
        if ((this.txtPayDiscount.getText().charAt(0) == '0')
                || (this.txtPayDiscount.getText().charAt(0) == '1')
                || (this.txtPayDiscount.getText().charAt(0) == '2')
                || (this.txtPayDiscount.getText().charAt(0) == '3')
                || (this.txtPayDiscount.getText().charAt(0) == '4')
                || (this.txtPayDiscount.getText().charAt(0) == '5')
                || (this.txtPayDiscount.getText().charAt(0) == '6')
                || (this.txtPayDiscount.getText().charAt(0) == '7')
                || (this.txtPayDiscount.getText().charAt(0) == '8')
                || (this.txtPayDiscount.getText().charAt(0) == '9')) {
        } else {
            this.txtPayDiscount.setForeground(Color.red);
            this.txtPayDiscount.setText("Please Enter Numeric Value");
        }
    }//GEN-LAST:event_txtPayDiscountKeyReleased

    private void txtPayTotalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPayTotalMouseClicked
        //Cheking Payto is Empty
        if (txtPaySub.getText().equals("") || txtPayTax.getText().equals("") || txtPayDiscount.getText().equals("")) {
            txtPayDiscount.setForeground(Color.red);
            txtPayDiscount.setText("Enter Discount");
        } else {
            //Calculating Total
            double paysub = Double.parseDouble(this.txtPaySub.getText());
            double paytax = Double.parseDouble(this.txtPayTax.getText());
            double paydis = Double.parseDouble(this.txtPayDiscount.getText());
            double total = ((paysub + paytax) - paydis);
            this.txtPayTotal.setText(String.valueOf(total));
        }
    }//GEN-LAST:event_txtPayTotalMouseClicked

    private void txtPayTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPayTotalActionPerformed

    }//GEN-LAST:event_txtPayTotalActionPerformed

    private void txtPayRsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPayRsMouseClicked
        //Cheking Payto is Empty
        if (txtAreaPayFor.getText().equals("")) {
            txtAreaPayFor.setForeground(Color.red);
            txtAreaPayFor.setText("Enter For");
        }

        //Clear Textfield
        if (txtPayRs.getText().equals("Enter Rupees") || txtPayRs.getText().equals("Please Enter Letters")) {
            txtPayRs.setForeground(Color.black);
            txtPayRs.setText("");
        }
    }//GEN-LAST:event_txtPayRsMouseClicked

    private void txtPayRsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPayRsKeyReleased
        //Checking Numeric or Letter
        if ((this.txtPayRs.getText().charAt(0) == '0')
                || (this.txtPayRs.getText().charAt(0) == '1')
                || (this.txtPayRs.getText().charAt(0) == '2')
                || (this.txtPayRs.getText().charAt(0) == '3')
                || (this.txtPayRs.getText().charAt(0) == '4')
                || (this.txtPayRs.getText().charAt(0) == '5')
                || (this.txtPayRs.getText().charAt(0) == '6')
                || (this.txtPayRs.getText().charAt(0) == '7')
                || (this.txtPayRs.getText().charAt(0) == '8')
                || (this.txtPayRs.getText().charAt(0) == '9')) {
            this.txtPayRs.setForeground(Color.red);
            this.txtPayRs.setText("Please Enter Letters");
        }
    }//GEN-LAST:event_txtPayRsKeyReleased

    private void txtPayRsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPayRsKeyTyped

    }//GEN-LAST:event_txtPayRsKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Calling to RepNoAutogenerate Method
        RepNoAutoGenerate();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtPayTaxPercentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPayTaxPercentMouseClicked
        //Clearing Textfield
        this.txtPayTaxPercent.setText("");
        this.txtPayTaxPercent.setForeground(Color.black);
    }//GEN-LAST:event_txtPayTaxPercentMouseClicked

    private void DatepickReceiptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatepickReceiptsActionPerformed
        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableReceipts.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Receipts Table Data Connot Clear");
        }

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableExpense.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Expense Table Data Connot Clear");
        }

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableIncome.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Table Data Connot Clear");
        }
        //############Date Validation & Loading tables#############

        //Getting Date from DatePicker
        Date RecDate = DatepickReceipts.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //Getting Current date
        Date todayDate = new Date();
        DateFormat todayFormat = new SimpleDateFormat("yyyy-MM-dd");
        String todayDateString = todayFormat.format(todayDate);

        //Checking Date
        if ((todayDateString.equals(RecDateString)) || (RecDate.before(todayDate))) {
            //Load Receipts Table
            LoadReceiptsTable();

            //Load Income & Expense tables
            LoadIncomeTable();
            LoadExpenseTable();

            //Clearing Receipt Numbers
            this.txtIncomeRepNo.setText("");
            this.txtExpenseRepNo.setText("");

        } else {
            JOptionPane.showMessageDialog(this, "Select Current Date or Past Date!");
            //Load Receipts Table
            LoadReceiptsTable();

            //Load Income & Expense tables
            LoadIncomeTable();
            LoadExpenseTable();
        }
    }//GEN-LAST:event_DatepickReceiptsActionPerformed

    private void btnAccountPreviousDayMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAccountPreviousDayMouseEntered
        //Changing Button Image
        this.btnAccountPreviousDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Previous_B.png")));
    }//GEN-LAST:event_btnAccountPreviousDayMouseEntered

    private void btnAccountPreviousDayMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAccountPreviousDayMouseExited
        //Changing Button Image
        this.btnAccountPreviousDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Previous.png")));
    }//GEN-LAST:event_btnAccountPreviousDayMouseExited

    private void btnAccountPreviousDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccountPreviousDayActionPerformed
        //Setting Previous day to Selected day in DatePicker
        Date CurrentDate = this.DatepickReceipts.getDate();
        Date nextdate = new Date();
        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        final Date date = CurrentDate;
        final Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_YEAR, -1);
        nextdate = calendar.getTime();
        this.DatepickReceipts.setDate(nextdate);

        //Clearing Payments Table
        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableReceipts.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Receipts Table Data Connot Clear");
        }

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableExpense.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Expense Table Data Connot Clear");
        }

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableIncome.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Table Data Connot Clear");
        }

        //Calling to LoadTable Methods
        LoadReceiptsTable();
        LoadIncomeTable();
        LoadExpenseTable();
    }//GEN-LAST:event_btnAccountPreviousDayActionPerformed

    private void btnAccountNexyDayMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAccountNexyDayMouseEntered
        //Changing Button Image
        this.btnAccountNexyDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Next_B.png")));
    }//GEN-LAST:event_btnAccountNexyDayMouseEntered

    private void btnAccountNexyDayMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAccountNexyDayMouseExited
        //Changing Button Image
        this.btnAccountNexyDay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_PayButton_Next.png")));
    }//GEN-LAST:event_btnAccountNexyDayMouseExited

    private void btnAccountNexyDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccountNexyDayActionPerformed
        //Setting Previous day to Selected day in DatePicker
        Date CurrentDate = this.DatepickReceipts.getDate();
        Date nextdate = new Date();
        final SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        final Date date = CurrentDate;
        final Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.DAY_OF_YEAR, 1);
        nextdate = calendar.getTime();
        this.DatepickReceipts.setDate(nextdate);

        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableReceipts.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Receipts Table Data Connot Clear");
        }

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableExpense.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Expense Table Data Connot Clear");
        }

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableIncome.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Table Data Connot Clear");
        }

        //############Date Validation & Loading tables#############
        //Getting Date from DatePicker
        Date RecDate = this.DatepickReceipts.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //Getting Current date
        Date todayDate = new Date();
        DateFormat todayFormat = new SimpleDateFormat("yyyy-MM-dd");
        String todayDateString = todayFormat.format(todayDate);

        //Checking Date
        if ((todayDateString.equals(RecDateString)) || (RecDate.before(todayDate))) {
            //Calling to LoadTable Method
            LoadReceiptsTable();
            LoadIncomeTable();
            LoadExpenseTable();
        } else {
            JOptionPane.showMessageDialog(this, "Select Current Date or Past Date!");
            //Calling to LoadTable Method
            LoadReceiptsTable();
            LoadIncomeTable();
            LoadExpenseTable();
        }

    }//GEN-LAST:event_btnAccountNexyDayActionPerformed

    private void jTableReceiptsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableReceiptsMouseClicked
        //Selecting Receipt Number
        int column = 1;
        int row = jTableReceipts.getSelectedRow();
        String value = jTableReceipts.getModel().getValueAt(row, column).toString();

        this.txtExpenseRepNo.setText(value);
        this.txtExpenseRepNo.setForeground(Color.black);
        this.txtIncomeRepNo.setText(value);
        this.txtIncomeRepNo.setForeground(Color.black);
    }//GEN-LAST:event_jTableReceiptsMouseClicked

    private void jTableReceiptsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableReceiptsKeyPressed

    }//GEN-LAST:event_jTableReceiptsKeyPressed

    private void jTableReceiptsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableReceiptsKeyReleased
        //Selecting Receipt Number
        int column = 1;
        int row = jTableReceipts.getSelectedRow();
        String value = jTableReceipts.getModel().getValueAt(row, column).toString();

        this.txtExpenseRepNo.setText(value);
        this.txtExpenseRepNo.setForeground(Color.black);
        this.txtIncomeRepNo.setText(value);
        this.txtIncomeRepNo.setForeground(Color.black);
    }//GEN-LAST:event_jTableReceiptsKeyReleased

    private void btnAddIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddIncomeActionPerformed
        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableIncome.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Table Data Connot Clear");
        }

        //Loading table data from database
        if ((this.txtIncomeRepNo.getText().equals("RN000")) || (this.txtIncomeRepNo.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "Select Record in Receipts Table You Want to Add!");
        } else {
            AddIncomeTable();
        }
    }//GEN-LAST:event_btnAddIncomeActionPerformed

    private void btnAddAllIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllIncomeActionPerformed
        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableIncome.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Table Data Connot Clear");
        }

        //Loading table data from database
        if (DatepickReceipts.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Select Receipts Date You Want to Add!");
        } else {
            AddAllIncomeTable();
        }
    }//GEN-LAST:event_btnAddAllIncomeActionPerformed

    private void txtIncomeRepNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIncomeRepNoMouseClicked

    }//GEN-LAST:event_txtIncomeRepNoMouseClicked

    private void btnRemoveAllIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllIncomeActionPerformed
        //Loading table data from database
        if (DatepickReceipts.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Select Receipts Date You Want to Remove!");
        } else {
            RemoveAllIncomeTable();
        }
    }//GEN-LAST:event_btnRemoveAllIncomeActionPerformed

    private void btnRemoveIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveIncomeActionPerformed
        //Removing table data from database
        if ((this.txtIncomeRepNo.getText().equals("RN000")) || (this.txtIncomeRepNo.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "No Record Exists To Remove\n If Exists Plase Select The Record In The Income Table!");
        } else {
            RemoveIncomeTable();
        }
    }//GEN-LAST:event_btnRemoveIncomeActionPerformed

    private void btnAddExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddExpenseActionPerformed
        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableExpense.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Table Data Connot Clear");
        }

        //Loading table data from database
        if ((this.txtExpenseRepNo.getText().equals("RN000")) || (this.txtExpenseRepNo.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "Select Record in Receipts Table You Want to Add!");
        } else {
            AddExpenseTable();
        }
    }//GEN-LAST:event_btnAddExpenseActionPerformed

    private void btnAddAllExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllExpenseActionPerformed
        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableExpense.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Expense Table Data Connot Clear");
        }

        //Loading table data from database
        if (DatepickReceipts.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Select Receipts Date You Want to Add!");
        } else {
            AddAllExpenseTable();
        }
    }//GEN-LAST:event_btnAddAllExpenseActionPerformed

    private void txtExpenseRepNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtExpenseRepNoMouseClicked

    }//GEN-LAST:event_txtExpenseRepNoMouseClicked

    private void btnRemoveAllExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveAllExpenseActionPerformed
        //Loading table data from database
        if (DatepickReceipts.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Select Receipts Date You Want to Remove!");
        } else {
            RemoveAllExpenseTable();
        }
    }//GEN-LAST:event_btnRemoveAllExpenseActionPerformed

    private void btnRemoveExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveExpenseActionPerformed

        //Removing table data from database
        if ((this.txtExpenseRepNo.getText().equals("RN000")) || (this.txtExpenseRepNo.getText().equals(""))) {
            JOptionPane.showMessageDialog(this, "No Record Exists To Remove\nIf Exists Plase Select The Record In The Expense Table!");
        } else {
            RemoveExpenseTable();

            try {
                DefaultTableModel dtm = (DefaultTableModel) jTableExpense.getModel();
                dtm.setNumRows(0);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Expense Table Data Connot Clear");
            }
            LoadExpenseTable();
        }
    }//GEN-LAST:event_btnRemoveExpenseActionPerformed

    private void jTableIncomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableIncomeMouseClicked
        //Selecting Receipt Number
        int column = 1;
        int row = jTableIncome.getSelectedRow();
        String value = jTableIncome.getModel().getValueAt(row, column).toString();

        this.txtIncomeRepNo.setText(value);
        this.txtIncomeRepNo.setForeground(Color.black);
    }//GEN-LAST:event_jTableIncomeMouseClicked

    private void jTableIncomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableIncomeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableIncomeKeyPressed

    private void jTableIncomeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableIncomeKeyReleased
        //Selecting Receipt Number
        int column = 1;
        int row = jTableIncome.getSelectedRow();
        String value = jTableIncome.getModel().getValueAt(row, column).toString();

        this.txtIncomeRepNo.setText(value);
        this.txtIncomeRepNo.setForeground(Color.black);
    }//GEN-LAST:event_jTableIncomeKeyReleased

    private void jTableExpenseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableExpenseMouseClicked
        //Selecting Receipt Number
        int column = 1;
        int row = jTableExpense.getSelectedRow();
        String value = jTableExpense.getModel().getValueAt(row, column).toString();

        this.txtExpenseRepNo.setText(value);
        this.txtExpenseRepNo.setForeground(Color.black);
    }//GEN-LAST:event_jTableExpenseMouseClicked

    private void jTableExpenseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableExpenseKeyReleased
        //Selecting Receipt Number
        int column = 1;
        int row = jTableExpense.getSelectedRow();
        String value = jTableExpense.getModel().getValueAt(row, column).toString();

        this.txtExpenseRepNo.setText(value);
        this.txtExpenseRepNo.setForeground(Color.black);
    }//GEN-LAST:event_jTableExpenseKeyReleased

    private void jScrollPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseClicked
        //Selecting Receipt Number
        int column = 1;
        int row = jTableExpense.getSelectedRow();
        String value = jTableExpense.getModel().getValueAt(row, column).toString();

        this.txtExpenseRepNo.setText(value);
        this.txtExpenseRepNo.setForeground(Color.black);
    }//GEN-LAST:event_jScrollPane3MouseClicked

    private void btnHMPAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMPAccountsActionPerformed
        // TODO add your handling code here:
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(true);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Accounts";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_B.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatepickReceipts.setDate(CurrentDate);
        this.DatepickReceipts.setFormats(new String[]{"yyyy-MM-dd"});

        //CLearing Account Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableReceipts.getModel();
            dtm.setNumRows(0);

            DefaultTableModel dtm1 = (DefaultTableModel) jTableIncome.getModel();
            dtm1.setNumRows(0);

            DefaultTableModel dtm2 = (DefaultTableModel) jTableExpense.getModel();
            dtm2.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Accounts Table Data Connot Clear");
        }

        //Loading Account Tables
        LoadReceiptsTable();
        LoadIncomeTable();
        LoadExpenseTable();
    }//GEN-LAST:event_btnHMPAccountsActionPerformed

    private void btnHMPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMPaymentsActionPerformed
        // TODO add your handling code here:
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(true);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Payments";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_B.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatePickPayDate.setDate(CurrentDate);
        this.DatePickPayDate.setFormats(new String[]{"yyyy-MM-dd"});
        this.DatePickPayTable.setDate(CurrentDate);
        this.DatePickPayTable.setFormats(new String[]{"yyyy-MM-dd"});

        //Clearing & Loading Current day Payments
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTablePayments.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Payments Table Data Connot Clear");
        }

        LoadPayTable();
    }//GEN-LAST:event_btnHMPaymentsActionPerformed

    private void btnHMProfitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMProfitActionPerformed
        // TODO add your handling code here:
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(true);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Profit";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_B.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));
        
        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatePickProfitFrom.setDate(CurrentDate);
        this.DatePickProfitFrom.setFormats(new String[]{"yyyy-MM-dd"});

        //CLearing Account Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableProfIncomes.getModel();
            dtm.setNumRows(0);

            DefaultTableModel dtm1 = (DefaultTableModel) jTableProfExpenses.getModel();
            dtm1.setNumRows(0);

           
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Table Data Connot Clear");
        }

        //Loading Tables
        LoadProfIncomeTable();
        LoadProfExpenseTable();
    }//GEN-LAST:event_btnHMProfitActionPerformed

    private void btnHMIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMIncomeActionPerformed
        // TODO add your handling code here:
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(true);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Income";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_B.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting table Culum Width
        this.jTableISRevenue.getColumn("Revenue").setMaxWidth(900);
        this.jTableISRevenue.getColumn("Revenue").setMinWidth(900);
        this.jTableISSold.getColumn("Cost Of Goods/Services Sold").setMaxWidth(900);
        this.jTableISSold.getColumn("Cost Of Goods/Services Sold").setMinWidth(900);
        this.jTableISExpenses.getColumn("Expenses").setMaxWidth(900);
        this.jTableISExpenses.getColumn("Expenses").setMinWidth(900);
        this.jTableISIncome.getColumn("Other Income").setMaxWidth(900);
        this.jTableISIncome.getColumn("Other Income").setMinWidth(900);

        //Setting jTable Column Allignment
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        this.jTableISRevenue.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISRevenue.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableISSold.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISSold.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableISExpenses.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISExpenses.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableISIncome.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableISIncome.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);

        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatePickISEndDate.setDate(CurrentDate);
        this.DatePickISEndDate.setFormats(new String[]{"yyyy-MM-dd"});

        //Cearing & Loading Income Statement Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableISRevenue.getModel();
            dtm.setNumRows(0);
            DefaultTableModel dtm1 = (DefaultTableModel) jTableISSold.getModel();
            dtm1.setNumRows(0);
            DefaultTableModel dtm2 = (DefaultTableModel) jTableISExpenses.getModel();
            dtm2.setNumRows(0);
            DefaultTableModel dtm3 = (DefaultTableModel) jTableISIncome.getModel();
            dtm3.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Statement Tables Connot Clear");
        }
        LoadAllISTable();
    }//GEN-LAST:event_btnHMIncomeActionPerformed

    private void btnHMCashFlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMCashFlowActionPerformed
        // TODO add your handling code here:
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(true);
        this.PnlBalanceSheet.setVisible(false);

        //Set Current panel
        currentPanel = "Cash";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_B.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_W.png")));

        //Setting table Culum Width
        this.jTableCFSOperating.getColumn("Cash Flows From Operating Activities").setMaxWidth(900);
        this.jTableCFSOperating.getColumn("Cash Flows From Operating Activities").setMinWidth(900);
        this.jTableCFSInvesting.getColumn("Cash Flows From Investing Activities").setMaxWidth(900);
        this.jTableCFSInvesting.getColumn("Cash Flows From Investing Activities").setMinWidth(900);
        this.jTableCFSFinancing.getColumn("Cash Flows From Financing Activities").setMaxWidth(900);
        this.jTableCFSFinancing.getColumn("Cash Flows From Financing Activities").setMinWidth(900);

        //Setting jTable Column Allignment
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        this.jTableCFSOperating.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableCFSOperating.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableCFSInvesting.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableCFSInvesting.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableCFSFinancing.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableCFSFinancing.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);

        //Setting Current Date & Format on Payments Date Picker
        Date CurrentDate = new Date();
        this.DatePickCFS.setDate(CurrentDate);
        this.DatePickCFS.setFormats(new String[]{"yyyy-MM-dd"});

        //Cearing & Loading Cash-Flow Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableCFSOperating.getModel();
            dtm.setNumRows(0);
            DefaultTableModel dtm1 = (DefaultTableModel) jTableCFSInvesting.getModel();
            dtm1.setNumRows(0);
            DefaultTableModel dtm2 = (DefaultTableModel) jTableCFSFinancing.getModel();
            dtm2.setNumRows(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Cash-Flows Statement Tables Connot Clear");
        }
        LoadAllCFSTable();
    }//GEN-LAST:event_btnHMCashFlowActionPerformed

    private void btnHMBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMBalanceActionPerformed
        //Panel Visible
        this.PnlHome.setVisible(false);
        this.PnlAccounts.setVisible(false);
        this.PnlPayments.setVisible(false);
        this.PnlProfit.setVisible(false);
        this.PnlIncomeStmt.setVisible(false);
        this.PnlCashFlow.setVisible(false);
        this.PnlBalanceSheet.setVisible(true);

        //Set Current panel
        currentPanel = "Balance";

        //Button Highlight
        this.btnMenuHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Home_W.png")));
        this.btnMenuAccounts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Accounts_W.png")));
        this.btnMenuPayments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Payments_W.png")));
        this.btnMenuProfit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Profit_W.png")));
        this.btnMenuIncome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Income_W.png")));
        this.btnMenuCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_CashFlow_W.png")));
        this.btnMenuBalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FMS_Images/FMS_MenuBar_Balance_B.png")));

        //Setting table Culum Width
        this.jTableBSCurrentAss.getColumn("Current Assets").setMaxWidth(300);
        this.jTableBSCurrentAss.getColumn("Current Assets").setMinWidth(300);
        this.jTableBSLongAss.getColumn("Long-Term Assets").setMaxWidth(300);
        this.jTableBSLongAss.getColumn("Long-Term Assets").setMinWidth(300);
        this.jTableBSCurrentLib.getColumn("Current Liabilities").setMaxWidth(300);
        this.jTableBSCurrentLib.getColumn("Current Liabilities").setMinWidth(300);
        this.jTableBSLongLib.getColumn("Long-Term Liabilities").setMaxWidth(300);
        this.jTableBSLongLib.getColumn("Long-Term Liabilities").setMinWidth(300);
        this.jTableBSEquity.getColumn("Owner's Equity").setMaxWidth(300);
        this.jTableBSEquity.getColumn("Owner's Equity").setMinWidth(300);

        //Setting jTable Column Allignment
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        this.jTableBSCurrentAss.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSCurrentAss.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSLongAss.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSLongAss.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSCurrentLib.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSCurrentLib.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSLongLib.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSLongLib.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.jTableBSEquity.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        this.jTableBSEquity.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);

        //Setting Current Date & Format on  Date Picker
        Date CurrentDate = new Date();
        this.DatePickBS.setDate(CurrentDate);
        this.DatePickBS.setFormats(new String[]{"yyyy-MM-dd"});

        //Cearing & Loading Balance Sheet Tables
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableBSCurrentAss.getModel();
            dtm.setNumRows(0);

            DefaultTableModel dtm1 = (DefaultTableModel) jTableBSLongAss.getModel();
            dtm1.setNumRows(0);

            DefaultTableModel dtm2 = (DefaultTableModel) jTableBSCurrentLib.getModel();
            dtm2.setNumRows(0);

            DefaultTableModel dtm3 = (DefaultTableModel) jTableBSLongLib.getModel();
            dtm3.setNumRows(0);

            DefaultTableModel dtm4 = (DefaultTableModel) jTableBSEquity.getModel();
            dtm4.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Balance Sheet Tables Connot Clear");
        }
        LoadAllBSTable();
    }//GEN-LAST:event_btnHMBalanceActionPerformed

    private void btnHMExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMExitActionPerformed
        // TODO add your handling code here:
        MHome mh = new MHome();
        JDesktopPane desktopPane = getDesktopPane();
        desktopPane.add(mh).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnHMExitActionPerformed

    private void btnHMSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHMSignOutActionPerformed
        // TODO add your handling code here:
        MainLogin ml = new MainLogin();
        JDesktopPane desktopPane = getDesktopPane();
        desktopPane.add(ml).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnHMSignOutActionPerformed

    private void jcmbProfitPeriodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcmbProfitPeriodMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jcmbProfitPeriodMouseClicked

    private void jcmbProfitPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbProfitPeriodActionPerformed
        // TODO add your handling code here:
        String period = this.jcmbProfitPeriod.getSelectedItem().toString();
        if(period == "Daily"){
            this.lblProfitFrom.setText("For The");
        }else if(period == "Weekly"){
            this.lblProfitFrom.setText("From The");
        }else if(period == "Monthly"){
            this.lblProfitFrom.setText("From The");
        }else if(period == "Annual"){
            this.lblProfitFrom.setText("From The");
        }
    }//GEN-LAST:event_jcmbProfitPeriodActionPerformed

    private void DatePickProfitFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatePickProfitFromActionPerformed
        // TODO add your handling code here:
        //To clear the Contents of Java JTable
        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableProfIncomes.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Table Data Connot Clear");
        }

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableProfExpenses.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Expense Table Data Connot Clear");
        }

        //Clearing Totals
        this.txtProfTotIncome.setText("");
        this.txtProfTotExpense.setText("");
        
        //############Date Validation & Loading tables#############

        //Getting Date from DatePicker
        Date RecDate = DatePickProfitFrom.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //Getting Current date
        Date todayDate = new Date();
        DateFormat todayFormat = new SimpleDateFormat("yyyy-MM-dd");
        String todayDateString = todayFormat.format(todayDate);

        //Checking Date
        if ((todayDateString.equals(RecDateString)) || (RecDate.before(todayDate))) {            
            //Load Income & Expense tables
            LoadProfIncomeTable();
            LoadProfExpenseTable();


        } else {
            JOptionPane.showMessageDialog(this, "Select Current Date or Past Date!");
            //Load Income & Expense tables
            LoadProfIncomeTable();
            LoadProfExpenseTable();
        }
    }//GEN-LAST:event_DatePickProfitFromActionPerformed

    private void btnProfCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfCalculateActionPerformed
        // TODO add your handling code here:
        //Total Income
        double sumIncome = 0.0;
        String Sumstring = null;
        for(int i = 0; i < jTableProfIncomes.getRowCount(); i++){      
        double Income = Double.parseDouble(jTableProfIncomes.getValueAt(i, 6)+"");
        sumIncome = sumIncome+Income;
        Sumstring = Double.toString(sumIncome);
        }
        this.txtProfTotIncome.setText(Sumstring);
        
        //Total Expense
        double sumExpense = 0.0;
        String SumExstring = null;
        for(int j = 0; j < jTableProfExpenses.getRowCount(); j++){      
        double expense = Double.parseDouble(jTableProfExpenses.getValueAt(j, 6)+"");
        sumExpense = sumExpense+expense;
        SumExstring = Double.toString(sumExpense);
        }
        this.txtProfTotExpense.setText(SumExstring);
        
        //Profit
        Double profit = sumIncome - sumExpense;
        String SumProfString = Double.toString(profit);
        this.txtProfTotProfit.setText(SumProfString);
       
    }//GEN-LAST:event_btnProfCalculateActionPerformed

    private void btnRepReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepReportActionPerformed
        // TODO add your handling code here:
         //Create Connection
        Connection conn = null;
        //********Step - 2 : JDBC Driver Register **********
        try{
            Class.forName("com.mysql.jdbc.Driver");
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Driver Loading Failed : " + e);
        }
      
        //********Step - 3 : DB Connection Opening **********
        try{
            conn = DriverManager.getConnection(DB_URL,USER,PASS);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "DB Connecting Failed : " + e);
        }
      
        //View Profit report
        try{
            String report = "src\\FMS_Reports\\FMS_Accounts.jrxml";
            //String report = "src\\FMS_Reports\\FMS_Report_Profit.jrxml";
            //String subrep1 = "src\\FMS_Reports\\FMS_Report_Profit_subreport1.jrxml";
            //String subrep2 = "src\\FMS_Reports\\FMS_Report_Profit_subreport2.jrxml";
            JasperReport jr = JasperCompileManager.compileReport(report);
            //JasperReport sr1 = JasperCompileManager.compileReport(subrep1);
            //JasperReport sr2 = JasperCompileManager.compileReport(subrep2);
            JasperPrint jp = JasperFillManager.fillReport(jr, null, conn);
            //View Report
            JasperViewer.viewReport(jp, false);
            
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Report Error : \n"+e);
        }
    }//GEN-LAST:event_btnRepReportActionPerformed

    //*****************************Receipt Table load****************************************************************
    public void LoadReceiptsTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = DatepickReceipts.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,RepType,Department,Sale,Payment,PayMethod,Subtotal,SalesTax,Discount,Total FROM fms_receipts WHERE Date = '" + RecDateString + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any Record Found On The Date You Selected\nPlease Select Another Date");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name
                    String Date = rs.getString("Date");
                    String Repno = rs.getString("RepNo");
                    String Reptype = rs.getString("RepType");
                    String Department = rs.getString("Department");
                    String Sale = rs.getString("Sale");
                    String Payment = rs.getString("Payment");
                    String Paymethod = rs.getString("PayMethod");
                    String Subtotal = rs.getString("Subtotal");
                    String Salestax = rs.getString("SalesTax");
                    String Discount = rs.getString("Discount");
                    String Total = rs.getString("Total");

                    Object[] row = {Date, Repno, Reptype, Department, Sale, Payment, Paymethod, Subtotal, Salestax, Discount, Total};
                    DefaultTableModel model = (DefaultTableModel) jTableReceipts.getModel();
                    model.addRow(row);
                }
            }

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************

//*****************************Income Table load****************************************************************
    public void LoadIncomeTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed : " + e);
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed : " + e);
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = DatepickReceipts.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_income WHERE Date = '" + RecDateString + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //varibale for un pw incorrect message
            while (rs.next()) {
                //Retrieve data by column name
                String Date = rs.getString("Date");
                String Repno = rs.getString("RepNo");
                String Sale = rs.getString("Sale");
                String Subtotal = rs.getString("Subtotal");
                String Salestax = rs.getString("SalesTax");
                String Discount = rs.getString("Discount");
                String Total = rs.getString("Total");

                Object[] row = {Date, Repno, Sale, Subtotal, Salestax, Discount, Total};
                DefaultTableModel model = (DefaultTableModel) jTableIncome.getModel();
                model.addRow(row);
            }

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Not Executed \n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************

//*****************************Expense Table load****************************************************************
    public void LoadExpenseTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed : " + e);
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed : " + e);
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = DatepickReceipts.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,Payment,Subtotal,PayTax,Discount,Total FROM fms_expense WHERE Date = '" + RecDateString + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //varibale for un pw incorrect message
            while (rs.next()) {
                //Retrieve data by column name
                String Date = rs.getString("Date");
                String Repno = rs.getString("RepNo");
                String Payment = rs.getString("Payment");
                String Subtotal = rs.getString("Subtotal");
                String Paytax = rs.getString("PayTax");
                String Discount = rs.getString("Discount");
                String Total = rs.getString("Total");

                Object[] row = {Date, Repno, Payment, Subtotal, Paytax, Discount, Total};
                DefaultTableModel model = (DefaultTableModel) jTableExpense.getModel();
                model.addRow(row);
            }

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Not Executed \n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************

    //*****************************Add Expense Table ****************************************************************
    public void AddExpenseTable() {
        //varibale for get data
        String Date = null;
        String Repno = null;
        String Payment = null;
        String Subtotal = null;
        String Paytax = null;
        String Discount = null;
        String Total = null;
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        String RepsNo = this.txtExpenseRepNo.getText();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,Payment,Subtotal,SalesTax,Discount,Total FROM fms_receipts WHERE RepNo = '" + RepsNo + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            while (rs.next()) {
                //Retrieve data by column name
                Date = rs.getString("Date");
                Repno = rs.getString("RepNo");
                Payment = rs.getString("Payment");
                Subtotal = rs.getString("Subtotal");
                Paytax = rs.getString("SalesTax");
                Discount = rs.getString("Discount");
                Total = rs.getString("Total");
            }

            //Adding Data To DB Table
            stmt = conn.createStatement();
            String sqlAdd = "INSERT INTO fms_expense VALUES ('" + Date + "','" + Repno + "','" + Payment + "', '" + Subtotal + "', '"
                    + Paytax + "', '" + Discount + "', '" + Total + "')";
            stmt.executeUpdate(sqlAdd);
            JOptionPane.showMessageDialog(this, "\"Payment Receipt\" Added to the \"Expense Account\"");

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "The Record You Are Going To Add Is Already Exits");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        LoadExpenseTable();
    }
    //*****************************End****************************************************************

    //*****************************Add All Expense Table ****************************************************************
    public void AddAllExpenseTable() {
        //varibale for get data
        String Date = null;
        String Repno = null;
        String Payment = null;
        String Subtotal = null;
        String Paytax = null;
        String Discount = null;
        String Total = null;
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connetion Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********     
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,Payment,Subtotal,SalesTax,Discount,Total FROM fms_receipts WHERE RepType = 'Payment'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            while (rs.next()) {
                //Retrieve data by column name
                Date = rs.getString("Date");
                Repno = rs.getString("RepNo");
                Payment = rs.getString("Payment");
                Subtotal = rs.getString("Subtotal");
                Paytax = rs.getString("SalesTax");
                Discount = rs.getString("Discount");
                Total = rs.getString("Total");

                //Adding Data To DB Table
                stmt = conn.createStatement();
                String sqlAdd = "INSERT INTO fms_expense VALUES ('" + Date + "','" + Repno + "','" + Payment + "', '" + Subtotal + "', '"
                        + Paytax + "', '" + Discount + "', '" + Total + "')";
                stmt.executeUpdate(sqlAdd);
            }

            JOptionPane.showMessageDialog(this, "All the \"Payment Receipts\" Added to the \"Expense Account\"");

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "Some Records are Already Exits\nPlease Check");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        LoadExpenseTable();
    }
    //*****************************End****************************************************************  

    //*****************************Add Income Table ****************************************************************
    public void AddIncomeTable() {
        //varibale for get data
        String Date = null;
        String Repno = null;
        String Sale = null;
        String Subtotal = null;
        String SalesTax = null;
        String Discount = null;
        String Total = null;
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        String RepsNo = this.txtExpenseRepNo.getText();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_receipts WHERE RepNo = '" + RepsNo + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********    
            while (rs.next()) {
                //Retrieve data by column name
                Date = rs.getString("Date");
                Repno = rs.getString("RepNo");
                Sale = rs.getString("Sale");
                Subtotal = rs.getString("Subtotal");
                SalesTax = rs.getString("SalesTax");
                Discount = rs.getString("Discount");
                Total = rs.getString("Total");
            }

            //Adding Data To DB Table
            stmt = conn.createStatement();
            String sqlAdd = "INSERT INTO fms_income VALUES ('" + Date + "','" + Repno + "','" + Sale + "', '" + Subtotal + "', '"
                    + SalesTax + "', '" + Discount + "', '" + Total + "')";
            stmt.executeUpdate(sqlAdd);
            JOptionPane.showMessageDialog(this, "\"Sale Receipt\" Added to the \"Income Account\"");

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "The Record You Are Going To Add IS Already Exits");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        LoadIncomeTable();
    }
    //*****************************End****************************************************************

    //*****************************Add All Income Table ****************************************************************
    public void AddAllIncomeTable() {
        //varibale for get data
        String Date = null;
        String Repno = null;
        String Sale = null;
        String Subtotal = null;
        String SalesTax = null;
        String Discount = null;
        String Total = null;
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed : " + e);
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed : " + e);
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_receipts WHERE RepType = 'Sale'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            while (rs.next()) {
                //Retrieve data by column name
                Date = rs.getString("Date");
                Repno = rs.getString("RepNo");
                Sale = rs.getString("Sale");
                Subtotal = rs.getString("Subtotal");
                SalesTax = rs.getString("SalesTax");
                Discount = rs.getString("Discount");
                Total = rs.getString("Total");

                //Adding Data To DB Table
                stmt = conn.createStatement();
                String sqlAdd = "INSERT INTO fms_income VALUES ('" + Date + "','" + Repno + "','" + Sale + "', '" + Subtotal + "', '"
                        + SalesTax + "', '" + Discount + "', '" + Total + "')";
                stmt.executeUpdate(sqlAdd);
            }

            JOptionPane.showMessageDialog(this, "All the \"Sale Receipts\" Added to the \"Income Account\"");

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "Some Records are Already Exits\nPlease Remove All First");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        LoadIncomeTable();
    }
    //*****************************End****************************************************************

    //*****************************Remove Income Table ****************************************************************
    public void RemoveIncomeTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Get textField data to String Variables
        String RmvIncomeRecNo = txtIncomeRepNo.getText();
        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********  
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            String sql = "DELETE FROM fms_income WHERE RepNo = '" + RmvIncomeRecNo + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "\"Income Account\" Record Removed Succesfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        LoadIncomeTable();
    }
    //*****************************End****************************************************************

    //*****************************Remove All Income Table ****************************************************************
    public void RemoveAllIncomeTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed : " + e);
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed : " + e);
        }

        //Getting Date from DatePicker
        Date RecDate = DatepickReceipts.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            String sql = "DELETE FROM fms_income WHERE Date = '" + RecDateString + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "All the \"Income Account\" Records Removed Succesfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Not Executed \n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableIncome.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Income Table Data Connot Clear");
        }
        LoadIncomeTable();
    }
    //*****************************End****************************************************************

    //*****************************Remove Expense Table ****************************************************************
    public void RemoveExpenseTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Get textField data to String Variables
        String RmvExpenseRecNo = txtExpenseRepNo.getText();
        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            String sql = "DELETE FROM fms_expense WHERE RepNo = '" + RmvExpenseRecNo + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "\"Expense Account\" Record Removed Succesfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        LoadExpenseTable();
    }
    //*****************************End****************************************************************   

    //*****************************Remove All Expense Table ****************************************************************
    public void RemoveAllExpenseTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed : " + e);
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed : " + e);
        }

        //Getting Date from DatePicker
        Date RecDate = DatepickReceipts.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            String sql = "DELETE FROM fms_expense WHERE Date = '" + RecDateString + "'";
            stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, "All the \"Expense Account\" Records Removed Succesfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Not Executed \n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        try {
            DefaultTableModel dtm = (DefaultTableModel) jTableExpense.getModel();
            dtm.setNumRows(0);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Expesne Table Data Connot Clear");
        }
        LoadExpenseTable();
    }
    //*****************************End****************************************************************

//*****************************Add Payment Method ****************************************************************
    public void AddPayment() {
        //varibale for get data
        String Date = null;
        String Repno = null;
        String RepType = null;
        String Department = null;
        String Payto = null;
        String Payfor = null;
        String Parfrom = null;
        String rs = null;
        String Payby = null;
        String Subtotal = null;
        String Paytax = null;
        String Discount = null;
        String Total = null;

        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute  Query**********
        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = DatePickPayDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        Date = RecDateString;
        Repno = txtPayRepNo.getText();
        RepType = "Payment";
        Department = "Finance Management";
        Payto = txtAreaPayTo.getText();
        Payfor = txtAreaPayFor.getText();
        Parfrom = txtPayFrom.getText();
        rs = txtPayRs.getText();
        Payby = cmbPayBy.getSelectedItem().toString();
        Subtotal = txtPaySub.getText();
        Paytax = txtPayTax.getText();
        Discount = txtPayDiscount.getText();
        Total = txtPayTotal.getText();

        try {

            //Adding Data To Payments Table
            stmt = conn.createStatement();
            String sqlAddPayment = "INSERT INTO fms_payments VALUES ('" + Date + "','" + Repno + "','" + Payto + "', '" + Payfor + "', '"
                    + Parfrom + "', '" + rs + "', '" + Payby + "', '" + Subtotal + "', '" + Paytax + "', '" + Discount + "', '" + Total + "')";
            stmt.executeUpdate(sqlAddPayment);

            //Adding Data To Receipts Table
            stmt = conn.createStatement();
            String sqlAddRep = "INSERT INTO fms_receipts VALUES ('" + Date + "','" + Repno + "','" + RepType + "', '" + Department + "', '', '"
                    + Payfor + "', '" + Payby + "', '" + Subtotal + "', '" + Paytax + "', '" + Discount + "', '" + Total + "')";
            stmt.executeUpdate(sqlAddRep);
            JOptionPane.showMessageDialog(this, "\"Payment Receipt\" Added to the\n\"Receipts Account & Payments Account\"");

            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "The \"Receipt No\" You Are Going To Add Is Already Exits");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************

//*****************************Remove Payment Method ****************************************************************
    public void RemovePayment() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Get textField data to String Variables
        String RmvPaymentRecNo = this.txtPayRepNo.getText();
        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********  
        try {
            //STEP 4: Execute a query
            //Removing Record from Payments table
            stmt = conn.createStatement();
            String sqlRmvPayments = "DELETE FROM fms_payments WHERE RepNo = '" + RmvPaymentRecNo + "'";
            stmt.executeUpdate(sqlRmvPayments);

            //Removing Record from Receipts table
            stmt = conn.createStatement();
            String sqlRmvReceipts = "DELETE FROM fms_receipts WHERE RepNo = '" + RmvPaymentRecNo + "'";
            stmt.executeUpdate(sqlRmvReceipts);

            JOptionPane.showMessageDialog(this, "Record Removed From\n\"Payments Account & Receipts Account\"");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        LoadIncomeTable();
    }
//*****************************End****************************************************************   

//*****************************RepNoAutoGenerate Method****************************************************************
    public void RepNoAutoGenerate() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********      
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT RepNo FROM fms_payments";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            String LastRepno = null;
            String NewRepno = null;
            while (rs.next()) {
                //Getting Last Record
                rs.last();
                //Retrieve Last RepNo        
                LastRepno = rs.getString("RepNo");

            }

            //Generating New RepNo
            NewRepno = LastRepno.substring(4);
            int IntRepno = Integer.parseInt(NewRepno);
            int IntRepno2 = IntRepno + 1;
            NewRepno = Integer.toString(IntRepno2);
            this.txtPayRepNo.setText("FMD-" + NewRepno);

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************   

//*****************************Payments Table load****************************************************************
    public void LoadPayTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickPayTable.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,PayTo,PayFor,PayFrom,Rs,PayBy,Subtotal,Paytax,Discount,Total FROM fms_payments WHERE Date = '" + RecDateString + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any Record Found On The Date You Selected\nPlease Select Another Date");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name
                    String Date = rs.getString("Date");
                    String Repno = rs.getString("RepNo");
                    String PayTo = rs.getString("PayTo");
                    String PayFor = rs.getString("PayFor");
                    String PayFrom = rs.getString("PayFrom");
                    String Rs = rs.getString("Rs");
                    String PayBy = rs.getString("PayBy");
                    String Subtotal = rs.getString("Subtotal");
                    String Paytax = rs.getString("PayTax");
                    String Discount = rs.getString("Discount");
                    String Total = rs.getString("Total");

                    Object[] row = {Date, Repno, PayTo, PayFor, PayFrom, Rs, PayBy, Subtotal, Paytax, Discount, Total};
                    DefaultTableModel model = (DefaultTableModel) this.jTablePayments.getModel();
                    model.addRow(row);
                }
            }
            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************

//*****************************Update Payments****************************************************************    
    public void UpdatePayments() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //varibale for get data
        String Date = null;
        String Repno = null;
        String RepType = null;
        String Department = null;
        String Payto = null;
        String Payfor = null;
        String Parfrom = null;
        String rs = null;
        String Payby = null;
        String Subtotal = null;
        String Paytax = null;
        String Discount = null;
        String Total = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = DatePickPayDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        Date = RecDateString;
        Repno = txtPayRepNo.getText();
        RepType = "Payment";
        Department = "Finance Management";
        Payto = txtAreaPayTo.getText();
        Payfor = txtAreaPayFor.getText();
        Parfrom = txtPayFrom.getText();
        rs = txtPayRs.getText();
        Payby = cmbPayBy.getSelectedItem().toString();
        Subtotal = txtPaySub.getText();
        Paytax = txtPayTax.getText();
        Discount = txtPayDiscount.getText();
        Total = txtPayTotal.getText();
        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            //Update Payments table
            String UpdatePayments = "UPDATE fms_payments "
                    + "SET Date = '" + Date + "', "
                    + "RepNo = '" + Repno + "', "
                    + "PayTo = '" + Payto + "', "
                    + "PayFor = '" + Payfor + "', "
                    + "PayFrom = '" + Parfrom + "', "
                    + "Rs = '" + rs + "', "
                    + "PayBy = '" + Payby + "', "
                    + "Subtotal = '" + Subtotal + "', "
                    + "Paytax = '" + Paytax + "', "
                    + "Discount = '" + Discount + "', "
                    + "Total = '" + Total + "' WHERE RepNo = '" + Repno + "'";

            stmt.executeUpdate(UpdatePayments);

            //Update Receipts table
            String UpdateReceipts = "UPDATE fms_receipts "
                    + "SET Date = '" + Date + "', "
                    + "RepNo = '" + Repno + "', "
                    + "RepType = '" + RepType + "', "
                    + "Department = '" + Department + "', "
                    + "Payment = '" + Payfor + "', "
                    + "PayMethod = '" + Payby + "', "
                    + "Subtotal = '" + Subtotal + "', "
                    + "SalesTax = '" + Paytax + "', "
                    + "Discount = '" + Discount + "', "
                    + "Total = '" + Total + "' WHERE RepNo = '" + Repno + "'";

            stmt.executeUpdate(UpdateReceipts);

            JOptionPane.showMessageDialog(this, "Payments Record Updated Successfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************    

//*****************************Add Income Statement Tables ****************************************************************
    public void AddIS() {
        //varibale for get data
        String Date = null;
        String Period = null;
        String Record = null;
        String Value = null;
        String AddTo = null;

        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute  Query**********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        Date = RecDateString;
        Period = this.cmbISPeriod.getSelectedItem().toString();
        AddTo = this.cmbISAddTo.getSelectedItem().toString();
        Record = this.txtISRecord.getText();
        Value = this.txtISValue.getText();
        try {
            //Adding Data To DB Table
            stmt = conn.createStatement();
            String sqlAdd = "INSERT INTO fms_income_statement VALUES ('" + Date + "','" + Period + "','" + AddTo + "', '" + Record + "', '" + Value + "')";
            stmt.executeUpdate(sqlAdd);
            JOptionPane.showMessageDialog(this, "Record Added To The " + AddTo + "");

            //STEP 5: Clean-up environment       
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "The Record You Are Going To Add Is Already Exits");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************

//*****************************Load Income Statement All the Tables***********************************
    public void LoadAllISTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;
        Statement stmt1 = null;
        Statement stmt2 = null;
        Statement stmt3 = null;
        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbISPeriod.getSelectedItem().toString();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Revenue'  AND Period = '" + Period + "'";
            ResultSet rs = stmt.executeQuery(sql);

            stmt1 = conn.createStatement();
            String sql1;
            sql1 = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Cost Of Goods/Services Sold'  AND Period = '" + Period + "'";
            ResultSet rs1 = stmt1.executeQuery(sql1);

            stmt2 = conn.createStatement();
            String sql2;
            sql2 = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Expenses'  AND Period = '" + Period + "'";
            ResultSet rs2 = stmt2.executeQuery(sql2);

            stmt3 = conn.createStatement();
            String sql3;
            sql3 = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Other Income'  AND Period = '" + Period + "'";
            ResultSet rs3 = stmt3.executeQuery(sql3);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any Record Found On The Date & Period You Selected\nPlease Select Another Date or Period");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name         
                    String Record = rs.getString("Record");
                    String Value = rs.getString("Value");

                    Object[] row = {Record, Value};
                    DefaultTableModel model = (DefaultTableModel) this.jTableISRevenue.getModel();
                    model.addRow(row);
                }
            }

            while (rs1.next()) {
                //Retrieve data by column name         
                String Record = rs1.getString("Record");
                String Value = rs1.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableISSold.getModel();
                model.addRow(row);
            }

            while (rs2.next()) {
                //Retrieve data by column name         
                String Record = rs2.getString("Record");
                String Value = rs2.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableISExpenses.getModel();
                model.addRow(row);
            }

            while (rs3.next()) {
                //Retrieve data by column name         
                String Record = rs3.getString("Record");
                String Value = rs3.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableISIncome.getModel();
                model.addRow(row);
            }
            //STEP 5: Clean-up environment
            rs.close();
            rs1.close();
            rs2.close();
            rs3.close();
            stmt.close();
            stmt1.close();
            stmt2.close();
            stmt3.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************   

//*****************************Load Income Statement Revenue Table***********************************
    public void LoadISRevenueTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbISPeriod.getSelectedItem().toString();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Revenue'  AND Period = '" + Period + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any \"Revenue\" Record Found On The Date & Period You Selected\nPlease Select Another Date or Period");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name         
                    String Record = rs.getString("Record");
                    String Value = rs.getString("Value");

                    Object[] row = {Record, Value};
                    DefaultTableModel model = (DefaultTableModel) this.jTableISRevenue.getModel();
                    model.addRow(row);
                }
            }
            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************

//*****************************Load Income Statement Cost Table***********************************
    public void LoadISCostTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbISPeriod.getSelectedItem().toString();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Cost Of Goods/Services Sold'  AND Period = '" + Period + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any \"Cost\" Record Found On The Date & Period You Selected\nPlease Select Another Date or Period");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name         
                    String Record = rs.getString("Record");
                    String Value = rs.getString("Value");

                    Object[] row = {Record, Value};
                    DefaultTableModel model = (DefaultTableModel) this.jTableISSold.getModel();
                    model.addRow(row);
                }
            }
            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************    

//*****************************Load Income Statement Expenses Table***********************************
    public void LoadISExpensesTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbISPeriod.getSelectedItem().toString();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Expenses'  AND Period = '" + Period + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any \"Expense\" Record Found On The Date & Period You Selected\nPlease Select Another Date or Period");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name         
                    String Record = rs.getString("Record");
                    String Value = rs.getString("Value");

                    Object[] row = {Record, Value};
                    DefaultTableModel model = (DefaultTableModel) this.jTableISExpenses.getModel();
                    model.addRow(row);
                }
            }
            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************    

//*****************************Load Income Statement Other Table***********************************
    public void LoadISOtherTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbISPeriod.getSelectedItem().toString();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Record,Value FROM fms_income_statement WHERE Date = '" + Date + "' AND RecType = 'Other Income'  AND Period = '" + Period + "'";
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any \"Other Income\" Record Found On The Date & Period You Selected\nPlease Select Another Date or Period");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name         
                    String Record = rs.getString("Record");
                    String Value = rs.getString("Value");

                    Object[] row = {Record, Value};
                    DefaultTableModel model = (DefaultTableModel) this.jTableISIncome.getModel();
                    model.addRow(row);
                }
            }
            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************        

//*****************************Update Income Statement****************************************************************    
    public void UpdateIS() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbISPeriod.getSelectedItem().toString();
        String Record = this.txtISRecord.getText();
        String Value = this.txtISValue.getText();
        String AddTo = this.cmbISAddTo.getSelectedItem().toString();
        //********Step - 4 : Execute  Query**********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            //Update table
            String UpdateRev = "UPDATE fms_income_statement "
                    + "SET Value = '" + Value + "' WHERE Date='" + Date + "' AND Period='" + Period + "' AND RecType='" + AddTo + "' AND Record='" + Record + "'";

            stmt.executeUpdate(UpdateRev);

            JOptionPane.showMessageDialog(this, "Income Statement Record Updated Successfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************

//*****************************Remove Income Statement****************************************************************    
    public void RemoveIS() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = this.DatePickISEndDate.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbISPeriod.getSelectedItem().toString();
        String Record = this.txtISRecord.getText();
        String Value = this.txtISValue.getText();
        String AddTo = this.cmbISAddTo.getSelectedItem().toString();
        //********Step - 4 : Execute  Query**********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            //Update table
            String UpdateRev = "DELETE FROM fms_income_statement WHERE Date='" + Date
                    + "' AND Period='" + Period
                    + "' AND RecType='" + AddTo
                    + "' AND Record='" + Record
                    + "' AND Value='" + Value + "'";

            stmt.executeUpdate(UpdateRev);

            JOptionPane.showMessageDialog(this, "Income Statement Record Removed Successfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************

//*****************************Load Cash-Flow Statement All the Tables***********************************
    public void LoadAllCFSTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;
        Statement stmt1 = null;
        Statement stmt2 = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickCFS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbCFSperiod.getSelectedItem().toString();
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Record,Value FROM fms_cash_flow WHERE Date = '" + Date + "' AND RecType = 'Operating Activities'  AND Period = '" + Period + "'";
            ResultSet rs = stmt.executeQuery(sql);

            stmt1 = conn.createStatement();
            String sql1;
            sql1 = "SELECT Record,Value FROM fms_cash_flow WHERE Date = '" + Date + "' AND RecType = 'Investing Activities'  AND Period = '" + Period + "'";
            ResultSet rs1 = stmt1.executeQuery(sql1);

            stmt2 = conn.createStatement();
            String sql2;
            sql2 = "SELECT Record,Value FROM fms_cash_flow WHERE Date = '" + Date + "' AND RecType = 'Financing Activities'  AND Period = '" + Period + "'";
            ResultSet rs2 = stmt2.executeQuery(sql2);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any Record Found On The Date & Period You Selected\nPlease Select Another Date or Period");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name         
                    String Record = rs.getString("Record");
                    String Value = rs.getString("Value");

                    Object[] row = {Record, Value};
                    DefaultTableModel model = (DefaultTableModel) this.jTableCFSOperating.getModel();
                    model.addRow(row);
                }
            }

            while (rs1.next()) {
                //Retrieve data by column name         
                String Record = rs1.getString("Record");
                String Value = rs1.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableCFSInvesting.getModel();
                model.addRow(row);
            }

            while (rs2.next()) {
                //Retrieve data by column name         
                String Record = rs2.getString("Record");
                String Value = rs2.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableCFSFinancing.getModel();
                model.addRow(row);
            }

            //STEP 5: Clean-up environment
            rs.close();
            rs1.close();
            rs2.close();
            stmt.close();
            stmt1.close();
            stmt2.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************   

//*****************************Add Income Statement Tables ****************************************************************
    public void AddCFS() {
        //varibale for get data
        String Date = null;
        String Period = null;
        String Record = null;
        String Value = null;
        String AddTo = null;

        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute  Query**********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickCFS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        Date = RecDateString;
        Period = this.cmbCFSperiod.getSelectedItem().toString();
        AddTo = this.cmbCFSAddTo.getSelectedItem().toString();
        Record = this.txtCFSRecord.getText();
        Value = this.txtCFSValue.getText();
        try {
            //Adding Data To DB Table
            stmt = conn.createStatement();
            String sqlAdd = "INSERT INTO fms_cash_flow VALUES ('" + Date + "','" + Period + "','" + AddTo + "', '" + Record + "', '" + Value + "')";
            stmt.executeUpdate(sqlAdd);
            JOptionPane.showMessageDialog(this, "Record Added To The " + AddTo + "");

            //STEP 5: Clean-up environment       
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "The Record You Are Going To Add Is Already Exits");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************

//*****************************Update Cash-Flow Statement****************************************************************    
    public void UpdateCFS() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = this.DatePickCFS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbCFSperiod.getSelectedItem().toString();
        String Record = this.txtCFSRecord.getText();
        String Value = this.txtCFSValue.getText();
        String AddTo = this.cmbCFSAddTo.getSelectedItem().toString();
        //********Step - 4 : Execute  Query**********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            //Update table
            String UpdateRev = "UPDATE fms_cash_flow "
                    + "SET Value = '" + Value + "' WHERE Date='" + Date + "' AND Period='" + Period + "' AND RecType='" + AddTo + "' AND Record='" + Record + "'";

            stmt.executeUpdate(UpdateRev);

            JOptionPane.showMessageDialog(this, "Cash-Flow Statement Record Updated Successfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************

//*****************************Remove Cash-Flow Statement****************************************************************    
    public void RemoveCFS() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = this.DatePickCFS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        //varibale for get data
        String Date = RecDateString;
        String Period = this.cmbCFSperiod.getSelectedItem().toString();
        String Record = this.txtCFSRecord.getText();
        String Value = this.txtCFSValue.getText();
        String AddTo = this.cmbCFSAddTo.getSelectedItem().toString();
        //********Step - 4 : Execute  Query**********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            //Update table
            String UpdateRev = "DELETE FROM fms_cash_flow WHERE Date='" + Date
                    + "' AND Period='" + Period
                    + "' AND RecType='" + AddTo
                    + "' AND Record='" + Record
                    + "' AND Value='" + Value + "'";

            stmt.executeUpdate(UpdateRev);

            JOptionPane.showMessageDialog(this, "Cash-Flow Statement Record Removed Successfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************

//*****************************Load Balance Sheet All the Tables***********************************
    public void LoadAllBSTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;
        Statement stmt1 = null;
        Statement stmt2 = null;
        Statement stmt3 = null;
        Statement stmt4 = null;
        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickBS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);

        //varibale for get data
        String Date = RecDateString;

        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Record,Value FROM fms_balance_sheet WHERE Date = '" + Date + "' AND RecType = 'Current Assets'";
            ResultSet rs = stmt.executeQuery(sql);

            stmt1 = conn.createStatement();
            String sql1;
            sql1 = "SELECT Record,Value FROM fms_balance_sheet WHERE Date = '" + Date + "' AND RecType = 'Long-Term Assets'";
            ResultSet rs1 = stmt1.executeQuery(sql1);

            stmt2 = conn.createStatement();
            String sql2;
            sql2 = "SELECT Record,Value FROM fms_balance_sheet WHERE Date = '" + Date + "' AND RecType = 'Current Liabilities'";
            ResultSet rs2 = stmt2.executeQuery(sql2);

            stmt3 = conn.createStatement();
            String sql3;
            sql3 = "SELECT Record,Value FROM fms_balance_sheet WHERE Date = '" + Date + "' AND RecType = 'Long-Term Liabilities'";
            ResultSet rs3 = stmt3.executeQuery(sql3);

            stmt4 = conn.createStatement();
            String sql4;
            sql4 = "SELECT Record,Value FROM fms_balance_sheet WHERE Date = '" + Date + "' AND RecType = 'Owners Equity'";
            ResultSet rs4 = stmt4.executeQuery(sql4);

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            if (rs == null || !rs.first()) {
                JOptionPane.showMessageDialog(this, "No Any Record Found On The Date & Period You Selected\nPlease Select Another Date or Period");
            } else {
                rs.beforeFirst();
                while (rs.next()) {
                    //Retrieve data by column name         
                    String Record = rs.getString("Record");
                    String Value = rs.getString("Value");

                    Object[] row = {Record, Value};
                    DefaultTableModel model = (DefaultTableModel) this.jTableBSCurrentAss.getModel();
                    model.addRow(row);
                }
            }

            while (rs1.next()) {
                //Retrieve data by column name         
                String Record = rs1.getString("Record");
                String Value = rs1.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableBSLongAss.getModel();
                model.addRow(row);
            }

            while (rs2.next()) {
                //Retrieve data by column name         
                String Record = rs2.getString("Record");
                String Value = rs2.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableBSCurrentLib.getModel();
                model.addRow(row);
            }

            while (rs3.next()) {
                //Retrieve data by column name         
                String Record = rs3.getString("Record");
                String Value = rs3.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableBSLongLib.getModel();
                model.addRow(row);
            }

            while (rs4.next()) {
                //Retrieve data by column name         
                String Record = rs4.getString("Record");
                String Value = rs4.getString("Value");

                Object[] row = {Record, Value};
                DefaultTableModel model = (DefaultTableModel) this.jTableBSEquity.getModel();
                model.addRow(row);
            }

            //STEP 5: Clean-up environment
            rs.close();
            rs1.close();
            rs2.close();
            rs3.close();
            rs4.close();
            stmt.close();
            stmt1.close();
            stmt2.close();
            stmt3.close();
            stmt4.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************   

//*****************************Add Balance Sheet Tables ****************************************************************
    public void AddBS() {
        //varibale for get data
        String Date = null;
        String Record = null;
        String Value = null;
        String AddTo = null;

        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //********Step - 4 : Execute  Query**********
        //Getting Date from DatePicker
        Date RecDate = this.DatePickBS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        Date = RecDateString;
        AddTo = this.cmbBSaddto.getSelectedItem().toString();
        Record = this.txtBSrecord.getText();
        Value = this.txtBSvalue.getText();
        try {
            //Adding Data To DB Table
            stmt = conn.createStatement();
            String sqlAdd = "INSERT INTO fms_balance_sheet VALUES ('" + Date + "', '" + AddTo + "', '" + Record + "', '" + Value + "')";
            stmt.executeUpdate(sqlAdd);
            JOptionPane.showMessageDialog(this, "Record Added To The " + AddTo + "");

            //STEP 5: Clean-up environment       
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "The Record You Are Going To Add Is Already Exits");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************

//*****************************Update Balance Sheet Statement****************************************************************    
    public void UpdateBS() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //varibale for get data
        String Date = null;
        String Record = null;
        String Value = null;
        String AddTo = null;
        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = this.DatePickBS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        Date = RecDateString;
        AddTo = this.cmbBSaddto.getSelectedItem().toString();
        Record = this.txtBSrecord.getText();
        Value = this.txtBSvalue.getText();
        //********Step - 4 : Execute  Query**********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            //Update table
            String UpdateRev = "UPDATE fms_balance_sheet "
                    + "SET Value = '" + Value + "' WHERE Date='" + Date + "' AND RecType='" + AddTo + "' AND Record='" + Record + "'";

            stmt.executeUpdate(UpdateRev);

            JOptionPane.showMessageDialog(this, "Balance Sheet Record Updated Successfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************

//*****************************Remove Balance Sheet****************************************************************    
    public void RemoveBS() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //varibale for get data
        String Date = null;
        String Record = null;
        String Value = null;
        String AddTo = null;
        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "JDBC Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connection Failed");
        }

        //Getting data from textfields
        //Getting Date from DatePicker
        Date RecDate = this.DatePickBS.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        Date = RecDateString;
        AddTo = this.cmbBSaddto.getSelectedItem().toString();
        Record = this.txtBSrecord.getText();
        Value = this.txtBSvalue.getText();
        //********Step - 4 : Execute  Query**********
        try {
            //STEP 4: Execute a query
            stmt = conn.createStatement();
            //Update table
            String UpdateRev = "DELETE FROM fms_balance_sheet WHERE Date='" + Date
                    + "' AND RecType='" + AddTo
                    + "' AND Record='" + Record
                    + "' AND Value='" + Value + "'";

            stmt.executeUpdate(UpdateRev);

            JOptionPane.showMessageDialog(this, "Balance Sheet Record Removed Successfully!");
            //STEP 5: Clean-up environment
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
//*****************************End****************************************************************************


//*****************************Profit Expense Table load****************************************************************
    public void LoadProfExpenseTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = DatePickProfitFrom.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        
        //Calculating Weekly Date
        Calendar c = Calendar.getInstance(); 
        c.setTime(RecDate); 
        c.add(Calendar.DATE, 6);
        Date weeklyDt = c.getTime();
        DateFormat weeklyDtFormat = new SimpleDateFormat("yyyy-MM-dd");
        String weeklyDate = weeklyDtFormat.format(weeklyDt);
        
        //Calculating Monthly Date
        Calendar cMonth = Calendar.getInstance(); 
        cMonth.setTime(RecDate); 
        cMonth.add(Calendar.DATE, 29);
        Date MonthlyDt = cMonth.getTime();
        DateFormat MonthlyDtFormat = new SimpleDateFormat("yyyy-MM-dd");
        String MonthlyDate = MonthlyDtFormat.format(MonthlyDt);
        
        //Calculating Annual Date
        Calendar cAnnual = Calendar.getInstance(); 
        cAnnual.setTime(RecDate); 
        cAnnual.add(Calendar.DATE, 364);
        Date AnnualDt = cAnnual.getTime();
        DateFormat AnnualDtFormat = new SimpleDateFormat("yyyy-MM-dd");
        String AnnualDate = AnnualDtFormat.format(AnnualDt);      
                                    
        try {
            stmt = conn.createStatement();
            String sql=null;
            String cmbPeriod = this.jcmbProfitPeriod.getSelectedItem().toString();
            if(cmbPeriod.equals("Daily")){
                sql = "SELECT Date,RepNo,Payment,Subtotal,PayTax,Discount,Total FROM fms_expense WHERE Date = '" + RecDateString + "'";
            }else if(cmbPeriod.equals("Weekly")){
                sql = "SELECT Date,RepNo,Payment,Subtotal,PayTax,Discount,Total FROM fms_expense WHERE Date BETWEEN '" + RecDateString + "' AND '" + weeklyDate + "'";
            }else if(cmbPeriod.equals("Monthly")){
                sql = "SELECT Date,RepNo,Payment,Subtotal,PayTax,Discount,Total FROM fms_expense WHERE Date BETWEEN '" + RecDateString + "' AND '" + MonthlyDate + "'";
            }else if(cmbPeriod.equals("Annual")){
                sql = "SELECT Date,RepNo,Payment,Subtotal,PayTax,Discount,Total FROM fms_expense WHERE Date BETWEEN '" + RecDateString + "' AND '" + AnnualDate + "'";
            }
            
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //varibale for un pw incorrect message
            while (rs.next()) {
                //Retrieve data by column name
                String Date = rs.getString("Date");
                String Repno = rs.getString("RepNo");
                String Payment = rs.getString("Payment");
                String Subtotal = rs.getString("Subtotal");
                String Paytax = rs.getString("PayTax");
                String Discount = rs.getString("Discount");
                String Total = rs.getString("Total");

                Object[] row = {Date, Repno, Payment, Subtotal, Paytax, Discount, Total};
                DefaultTableModel model = (DefaultTableModel) jTableProfExpenses.getModel();
                model.addRow(row);
            }

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Not Executed \n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************
    
//*****************************Profit Income Table load****************************************************************
    public void LoadProfIncomeTable() {
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed");
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed");
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        //Getting Date from DatePicker
        Date RecDate = DatePickProfitFrom.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        
        //Calculating Weekly Date
        Calendar c = Calendar.getInstance(); 
        c.setTime(RecDate); 
        c.add(Calendar.DATE, 6);
        Date weeklyDt = c.getTime();
        DateFormat weeklyDtFormat = new SimpleDateFormat("yyyy-MM-dd");
        String weeklyDate = weeklyDtFormat.format(weeklyDt);
        
        //Calculating Monthly Date
        Calendar cMonth = Calendar.getInstance(); 
        cMonth.setTime(RecDate); 
        cMonth.add(Calendar.DATE, 29);
        Date MonthlyDt = cMonth.getTime();
        DateFormat MonthlyDtFormat = new SimpleDateFormat("yyyy-MM-dd");
        String MonthlyDate = MonthlyDtFormat.format(MonthlyDt);
     
        
        //Calculating Annual Date
        Calendar cAnnual = Calendar.getInstance(); 
        cAnnual.setTime(RecDate); 
        cAnnual.add(Calendar.DATE, 364);
        Date AnnualDt = cAnnual.getTime();
        DateFormat AnnualDtFormat = new SimpleDateFormat("yyyy-MM-dd");
        String AnnualDate = AnnualDtFormat.format(AnnualDt);
       
        
        try {
            stmt = conn.createStatement();
            String sql=null;
            String cmbPeriod = this.jcmbProfitPeriod.getSelectedItem().toString();
            if(cmbPeriod.equals("Daily")){
                sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_income WHERE Date = '" + RecDateString + "'";
            }else if(cmbPeriod.equals("Weekly")){
                sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_income WHERE Date BETWEEN '" + RecDateString + "' AND '" + weeklyDate + "'";
            }else if(cmbPeriod.equals("Monthly")){
                sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_income WHERE Date BETWEEN '" + RecDateString + "' AND '" + MonthlyDate + "'";
            }else if(cmbPeriod.equals("Annual")){
                sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_income WHERE Date BETWEEN '" + RecDateString + "' AND '" + AnnualDate + "'";
            }
            
            ResultSet rs = stmt.executeQuery(sql);

            //******** Retrieving Data **********
            //varibale for un pw incorrect message
            while (rs.next()) {
                //Retrieve data by column name
                String Date = rs.getString("Date");
                String Repno = rs.getString("RepNo");
                String Sale = rs.getString("Sale");
                String Subtotal = rs.getString("Subtotal");
                String Salestax = rs.getString("SalesTax");
                String Discount = rs.getString("Discount");
                String Total = rs.getString("Total");

                Object[] row = {Date, Repno, Sale, Subtotal, Salestax, Discount, Total};
                DefaultTableModel model = (DefaultTableModel) jTableProfIncomes.getModel();
                model.addRow(row);
            }

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            JOptionPane.showMessageDialog(this, "Query Not Executed \n" + se);

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
    }
    //*****************************End****************************************************************
 
//*****************************Load Profit Table ****************************************************************
    public void LoadProfit() {
        //varibale for get data
        //Getting Date from DatePicker
        Date RecDate = DatePickProfitFrom.getDate();
        DateFormat RecDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String RecDateString = RecDateFormat.format(RecDate);
        
        String Date = null;
        String Repno = null;
        String Sale = null;
        String Subtotal = null;
        String SalesTax = null;
        String Discount = null;
        String Total = null;
        //***** Step - 1 : Declaring Connection Variables ********
        Connection conn = null;
        Statement stmt = null;

        //********Step - 2 : JDBC Driver Register **********
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Driver Loading Failed : " + e);
        }

        //********Step - 3 : DB Connection Opening **********
        try {
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "DB Connecting Failed : " + e);
        }

        //********Step - 4 : Execute Select Query, Retrieving Data & Printing **********
        try {
            stmt = conn.createStatement();
            String sql;
            sql = "SELECT Date,RepNo,Sale,Subtotal,SalesTax,Discount,Total FROM fms_income WHERE Date = '"+RecDateString+"'";
            ResultSet rs = stmt.executeQuery(sql);            

            //******** Retrieving Data **********
            //Checking table is Empty & Getting Data
            while (rs.next()) {
                //Retrieve data by column name
                Date = rs.getString("Date");
                Repno = rs.getString("RepNo");
                Sale = rs.getString("Sale");
                Subtotal = rs.getString("Subtotal");
                SalesTax = rs.getString("SalesTax");
                Discount = rs.getString("Discount");
                Total = rs.getString("Total");

                //Adding Data To DB Table
                stmt = conn.createStatement();
                String sqlAdd = "INSERT INTO(Date,RepNo,Sale,Subtotal,SalesTax,Discount,Income) fms_profit VALUES ('" + Date + "','" + Repno + "','" + Sale + "', '" + Subtotal + "', '"
                        + SalesTax + "', '" + Discount + "', '" + Total + "')";
                stmt.executeUpdate(sqlAdd);
            }            

            //STEP 5: Clean-up environment
            rs.close();
            stmt.close();
            conn.close();

        } catch (SQLException se) {
            //Duplicate Primary Key Cathcing
            if (se.getErrorCode() == 1062) {
                JOptionPane.showMessageDialog(this, "Some Records are Already Exits\nPlease Remove All First");
            } else {
                JOptionPane.showMessageDialog(this, "Query Execution Error\nCheck Error Message Below\n" + se);
            }

        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try

        LoadIncomeTable();
    }
    //*****************************End****************************************************************

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker DatePickBS;
    private org.jdesktop.swingx.JXDatePicker DatePickCFS;
    private org.jdesktop.swingx.JXDatePicker DatePickISEndDate;
    private org.jdesktop.swingx.JXDatePicker DatePickPayDate;
    private org.jdesktop.swingx.JXDatePicker DatePickPayTable;
    private org.jdesktop.swingx.JXDatePicker DatePickProfitFrom;
    private org.jdesktop.swingx.JXDatePicker DatepickReceipts;
    private javax.swing.JPanel PnlAccounts;
    private javax.swing.JPanel PnlBalanceSheet;
    private javax.swing.JPanel PnlCashFlow;
    private javax.swing.JPanel PnlHome;
    private javax.swing.JPanel PnlIncomeStmt;
    private javax.swing.JPanel PnlMenu;
    private javax.swing.JPanel PnlPayments;
    private javax.swing.JPanel PnlProfit;
    private javax.swing.JButton btnAccountNexyDay;
    private javax.swing.JButton btnAccountPreviousDay;
    private javax.swing.JButton btnAddAllExpense;
    private javax.swing.JButton btnAddAllIncome;
    private javax.swing.JButton btnAddExpense;
    private javax.swing.JButton btnAddIncome;
    private javax.swing.JButton btnBSadd;
    private javax.swing.JButton btnBScalculate;
    private javax.swing.JButton btnBSclear;
    private javax.swing.JButton btnBSremove;
    private javax.swing.JButton btnBSupdate;
    private javax.swing.JButton btnCFSadd;
    private javax.swing.JButton btnCFScalculate;
    private javax.swing.JButton btnCFSclear;
    private javax.swing.JButton btnCFSremove;
    private javax.swing.JButton btnCFSupdate;
    private javax.swing.JButton btnDateNext;
    private javax.swing.JButton btnDatePrevious;
    private javax.swing.JButton btnHMBalance;
    private javax.swing.JButton btnHMCashFlow;
    private javax.swing.JButton btnHMExit;
    private javax.swing.JButton btnHMIncome;
    private javax.swing.JButton btnHMPAccounts;
    private javax.swing.JButton btnHMPayments;
    private javax.swing.JButton btnHMProfit;
    private javax.swing.JButton btnHMSignOut;
    private javax.swing.JButton btnISAdd;
    private javax.swing.JButton btnISCalculate;
    private javax.swing.JButton btnISClear;
    private javax.swing.JButton btnISRemove;
    private javax.swing.JButton btnISupdate;
    private javax.swing.JButton btnMenuAccounts;
    private javax.swing.JButton btnMenuBalance;
    private javax.swing.JButton btnMenuCash;
    private javax.swing.JButton btnMenuHome;
    private javax.swing.JButton btnMenuIncome;
    private javax.swing.JButton btnMenuPayments;
    private javax.swing.JButton btnMenuProfit;
    private javax.swing.JButton btnPayAdd;
    private javax.swing.JButton btnPayClear;
    private javax.swing.JButton btnPayRmvPayment;
    private javax.swing.JButton btnPayUpdate;
    private javax.swing.JButton btnProfCalculate;
    private javax.swing.JButton btnRemoveAllExpense;
    private javax.swing.JButton btnRemoveAllIncome;
    private javax.swing.JButton btnRemoveExpense;
    private javax.swing.JButton btnRemoveIncome;
    private javax.swing.JButton btnRepReport;
    private javax.swing.JComboBox<String> cmbBSaddto;
    private javax.swing.JComboBox<String> cmbCFSAddTo;
    private javax.swing.JComboBox<String> cmbCFSperiod;
    private javax.swing.JComboBox<String> cmbISAddTo;
    private javax.swing.JComboBox<String> cmbISPeriod;
    private javax.swing.JComboBox<String> cmbPayBy;
    private javax.swing.JLabel emp_background;
    private javax.swing.JLabel emp_background1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTableBSCurrentAss;
    private javax.swing.JTable jTableBSCurrentLib;
    private javax.swing.JTable jTableBSEquity;
    private javax.swing.JTable jTableBSLongAss;
    private javax.swing.JTable jTableBSLongLib;
    private javax.swing.JTable jTableCFSFinancing;
    private javax.swing.JTable jTableCFSInvesting;
    private javax.swing.JTable jTableCFSOperating;
    private javax.swing.JTable jTableExpense;
    private javax.swing.JTable jTableISExpenses;
    private javax.swing.JTable jTableISIncome;
    private javax.swing.JTable jTableISRevenue;
    private javax.swing.JTable jTableISSold;
    private javax.swing.JTable jTableIncome;
    private javax.swing.JTable jTablePayments;
    private javax.swing.JTable jTableProfExpenses;
    private javax.swing.JTable jTableProfIncomes;
    private javax.swing.JTable jTableReceipts;
    private javax.swing.JComboBox<String> jcmbProfitPeriod;
    private javax.swing.JLabel lblProfitFrom;
    private javax.swing.JTextArea txtAreaPayFor;
    private javax.swing.JTextArea txtAreaPayTo;
    private javax.swing.JTextField txtBSTotalAss;
    private javax.swing.JTextField txtBSTotalLibAndEquity1;
    private javax.swing.JTextField txtBSrecord;
    private javax.swing.JTextField txtBSvalue;
    private javax.swing.JTextField txtCFSRecord;
    private javax.swing.JTextField txtCFSValue;
    private javax.swing.JTextField txtExpenseRepNo;
    private javax.swing.JTextField txtISRecord;
    private javax.swing.JTextField txtISValue;
    private javax.swing.JTextField txtIncomeRepNo;
    private javax.swing.JTextField txtPayDiscount;
    private javax.swing.JTextField txtPayFrom;
    private javax.swing.JTextField txtPayRepNo;
    private javax.swing.JTextField txtPayRs;
    private javax.swing.JTextField txtPaySub;
    private javax.swing.JTextField txtPayTax;
    private javax.swing.JTextField txtPayTaxPercent;
    private javax.swing.JTextField txtPayTotal;
    private javax.swing.JTextField txtProfTotExpense;
    private javax.swing.JTextField txtProfTotIncome;
    private javax.swing.JTextField txtProfTotProfit;
    // End of variables declaration//GEN-END:variables
}